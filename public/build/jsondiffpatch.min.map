{"version":3,"sources":["/source-files/jsondiffpatch/node_modules/fiberglass/node_modules/browserify/node_modules/browser-pack/_prelude.js","/source-files/jsondiffpatch/public/external/diff_match_patch_uncompressed.js","/source-files/jsondiffpatch/src/clone.js","/source-files/jsondiffpatch/src/contexts/context.js","/source-files/jsondiffpatch/src/contexts/diff.js","/source-files/jsondiffpatch/src/contexts/patch.js","/source-files/jsondiffpatch/src/contexts/reverse.js","/source-files/jsondiffpatch/src/date-reviver.js","/source-files/jsondiffpatch/src/diffpatcher.js","/source-files/jsondiffpatch/src/environment.js","/source-files/jsondiffpatch/src/filters/arrays.js","/source-files/jsondiffpatch/src/filters/dates.js","/source-files/jsondiffpatch/src/filters/lcs.js","/source-files/jsondiffpatch/src/filters/nested.js","/source-files/jsondiffpatch/src/filters/texts.js","/source-files/jsondiffpatch/src/filters/trivial.js","/source-files/jsondiffpatch/src/main.js","/source-files/jsondiffpatch/src/pipe.js","/source-files/jsondiffpatch/src/processor.js"],"names":["diff_match_patch","this","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","Diff","prototype","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","length","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","linearray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","x1","k1_offset","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","diff_linesToCharsMunge_","text","chars","lineStart","lineEnd","lineArrayLength","lineArray","line","lineHash","hasOwnProperty","undefined","String","fromCharCode","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","dmp","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastequality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length","diff_cleanupSemanticScore_","one","two","score","match","punctuation","whitespace","linebreak","blanklineEnd","blanklineStart","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","chars1","chars2","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","op","data","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","match_bitapScore_","e","accuracy","proximity","abs","s","match_alphabet_","score_threshold","best_loc","lastIndexOf","matchmask","bin_min","bin_mid","last_rd","bin_max","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","slice","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","start_loc","expected_loc","end_loc","index2","index1","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","coords1","coords2","cloneRegExp","re","regexMatch","exec","RegExp","clone","arg","isArray","map","cloned","name","Object","call","module","exports","Pipe","require","Context","setResult","result","hasResult","exit","exiting","switchTo","next","pipe","nextPipe","child","parent","childName","root","options","children","nextAfterChildren","defaultClone","DiffContext","left","right","cloneDiffValues","apply","arguments","PatchContext","ReverseContext","key","value","parts","UTC","Processor","trivial","nested","arrays","dates","texts","DiffPatcher","processor","append","collectChildrenDiffFilter","diffFilter","objectsDiffFilter","shouldHaveResult","collectChildrenPatchFilter","patchFilter","collectChildrenReverseFilter","reverseFilter","diff","process","reverse","unpatch","isBrowser","window","arraysHaveMatchByRef","array1","array2","len1","len2","val1","val2","matchItems","context","value1","value2","objectHash","matchByPosition","hash1","hash2","hashCache1","hashCache2","lcs","ARRAY_MOVE","arrayIndexOf","array","item","leftIsArray","index","matchContext","commonHead","commonTail","_t","trimmed1","trimmed2","seq","get","removedItems","indices1","detectMove","includeValueOnMove","removedItemsLength","indexOnArray2","indices2","isMove","removeItemIndex1","filterName","compare","numerically","b","numericallyBy","toRemove","toInsert","toModify","sort","indexDiff","removedValue","toInsertLength","toModifyLength","modification","newName","substr","reverseArrayDeltaIndex","itemDelta","reverseIndex","deltaIndex","deltaItem","moveFromIndex","moveToIndex","deleteIndex","defaultMatch","lengthMatrix","matrix","backtrack","sequence","subsequence","leftType","propertyFilter","TEXT_DIFF","DEFAULT_MIN_LENGTH","cachedDiffPatch","getDiffMatchPatch","required","instance","err","error","diff_match_patch_not_found","txt1","txt2","textPatchFailed","minLength","textDiff","diffMatchPatch","textDeltaReverse","l","lines","lineTmp","lineHeader","header","headerRegex","rightType","rightIsArray","regexArgs","environment","create","dateReviver","defaultInstance","homepage","version","packageInfoModuleName","packageInfo","formatterModuleName","formatters","console","filters","input","debug","filter","log","resultCheck","msg","prepend","list","names","after","params","before","clear","should","noResult","selfOptions","pipes","lastPipe","lastContext"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nfunction diff_match_patch() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close does\n  // the contents have to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n}\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/** @typedef {!Array.<number|string>} */\ndiff_match_patch.Diff;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n  longtext = shorttext = null;  // Garbage collect.\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = /** @type {string} */(a[0]);\n  text2 = /** @type {string} */(a[1]);\n  var linearray = /** @type {!Array.<string>} */(a[2]);\n\n  var diffs = this.diff_bisect_(text1, text2, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push([DIFF_EQUAL, '']);\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          var a = this.diff_main(text_delete, text_insert, false, deadline);\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          for (var j = a.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, a[j]);\n          }\n          pointer = pointer + a.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {!Array.<string|!Array.<string>>} Three element Array, containing the\n *     encoded text1, the encoded text2 and the array of unique strings.  The\n *     zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n    return chars;\n  }\n\n  var chars1 = diff_linesToCharsMunge_(text1);\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return [chars1, chars2, lineArray];\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var x = 0; x < diffs.length; x++) {\n    var chars = diffs[x][1];\n    var text = [];\n    for (var y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;  // Always equal to equalities[equalitiesLength-1][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = /** @type {string} */(diffs[pointer][1]);\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastequality !== null && (lastequality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastequality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = /** @type {string} */(diffs[pointer - 1][1]);\n      var insertion = /** @type {string} */(diffs[pointer][1]);\n      var overlap_length = this.diff_commonOverlap_(deletion, insertion);\n      if (overlap_length >= deletion.length / 2 ||\n          overlap_length >= insertion.length / 2) {\n        // Overlap found.  Insert an equality and trim the surrounding edits.\n        diffs.splice(pointer, 0,\n            [DIFF_EQUAL, insertion.substring(0, overlap_length)]);\n        diffs[pointer - 1][1] =\n            deletion.substring(0, deletion.length - overlap_length);\n        diffs[pointer + 1][1] = insertion.substring(overlap_length);\n        pointer++;\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  // Define some regex patterns for matching boundaries.\n  var punctuation = /[^a-zA-Z0-9]/;\n  var whitespace = /\\s/;\n  var linebreak = /[\\r\\n]/;\n  var blanklineEnd = /\\n\\r?\\n$/;\n  var blanklineStart = /^\\r?\\n\\r?\\n/;\n\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 5 (best) to 0 (worst).\n   * Closure, makes reference to regex patterns defined above.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 5;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var score = 0;\n    // One point for non-alphanumeric.\n    if (one.charAt(one.length - 1).match(punctuation) ||\n        two.charAt(0).match(punctuation)) {\n      score++;\n      // Two points for whitespace.\n      if (one.charAt(one.length - 1).match(whitespace) ||\n          two.charAt(0).match(whitespace)) {\n        score++;\n        // Three points for line breaks.\n        if (one.charAt(one.length - 1).match(linebreak) ||\n            two.charAt(0).match(linebreak)) {\n          score++;\n          // Four points for blank lines.\n          if (one.match(blanklineEnd) || two.match(blanklineStart)) {\n            score++;\n          }\n        }\n      }\n    }\n    return score;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = /** @type {string} */(diffs[pointer - 1][1]);\n      var edit = /** @type {string} */(diffs[pointer][1]);\n      var equality2 = /** @type {string} */(diffs[pointer + 1][1]);\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  var lastequality = '';  // Always equal to equalities[equalitiesLength-1][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastequality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastequality = '';\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastequality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastequality = '';\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var i = 0;\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n    if (op !== DIFF_DELETE) {\n      i += data.length;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\n        } else {\n          diffs[diffsLength++] = [DIFF_DELETE, text];\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] = patch.diffs[y].slice();\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 > patch_size) {\n      var bigpatch = patches[x];\n      // Remove the big old patch.\n      patches.splice(x--, 1);\n      var start1 = bigpatch.start1;\n      var start2 = bigpatch.start2;\n      var precontext = '';\n      while (bigpatch.diffs.length !== 0) {\n        // Create one of several smaller patches.\n        var patch = new diff_match_patch.patch_obj();\n        var empty = true;\n        patch.start1 = start1 - precontext.length;\n        patch.start2 = start2 - precontext.length;\n        if (precontext !== '') {\n          patch.length1 = patch.length2 = precontext.length;\n          patch.diffs.push([DIFF_EQUAL, precontext]);\n        }\n        while (bigpatch.diffs.length !== 0 &&\n               patch.length1 < patch_size - this.Patch_Margin) {\n          var diff_type = bigpatch.diffs[0][0];\n          var diff_text = bigpatch.diffs[0][1];\n          if (diff_type === DIFF_INSERT) {\n            // Insertions are harmless.\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n            patch.diffs.push(bigpatch.diffs.shift());\n            empty = false;\n          } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                     patch.diffs[0][0] == DIFF_EQUAL &&\n                     diff_text.length > 2 * patch_size) {\n            // This is a large deletion.  Let it pass in one chunk.\n            patch.length1 += diff_text.length;\n            start1 += diff_text.length;\n            empty = false;\n            patch.diffs.push([diff_type, diff_text]);\n            bigpatch.diffs.shift();\n          } else {\n            // Deletion or equality.  Only take as much as we can stomach.\n            diff_text = diff_text.substring(0,\n                patch_size - patch.length1 - this.Patch_Margin);\n            patch.length1 += diff_text.length;\n            start1 += diff_text.length;\n            if (diff_type === DIFF_EQUAL) {\n              patch.length2 += diff_text.length;\n              start2 += diff_text.length;\n            } else {\n              empty = false;\n            }\n            patch.diffs.push([diff_type, diff_text]);\n            if (diff_text == bigpatch.diffs[0][1]) {\n              bigpatch.diffs.shift();\n            } else {\n              bigpatch.diffs[0][1] =\n                  bigpatch.diffs[0][1].substring(diff_text.length);\n            }\n          }\n        }\n        // Compute the head context for the next patch.\n        precontext = this.diff_text2(patch.diffs);\n        precontext =\n            precontext.substring(precontext.length - this.Patch_Margin);\n        // Append the end context for this patch.\n        var postcontext = this.diff_text1(bigpatch.diffs)\n                              .substring(0, this.Patch_Margin);\n        if (postcontext !== '') {\n          patch.length1 += postcontext.length;\n          patch.length2 += postcontext.length;\n          if (patch.diffs.length !== 0 &&\n              patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n            patch.diffs[patch.diffs.length - 1][1] += postcontext;\n          } else {\n            patch.diffs.push([DIFF_EQUAL, postcontext]);\n          }\n        }\n        if (!empty) {\n          patches.splice(++x, 0, patch);\n        }\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push([DIFF_DELETE, line]);\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push([DIFF_INSERT, line]);\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push([DIFF_EQUAL, line]);\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emmulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indicies are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// Export these global variables so that they survive Google's JS compiler.\n// In a browser, 'this' will be 'window'.\n// In node.js 'this' will be a global object.\nthis['diff_match_patch'] = diff_match_patch;\nthis['DIFF_DELETE'] = DIFF_DELETE;\nthis['DIFF_INSERT'] = DIFF_INSERT;\nthis['DIFF_EQUAL'] = DIFF_EQUAL;\n\n","\nvar isArray = (typeof Array.isArray === 'function') ?\n  // use native function\n  Array.isArray :\n  // use instanceof operator\n  function(a) {\n    return a instanceof Array;\n  };\n\nfunction cloneRegExp(re) {\n  var regexMatch = /^\\/(.*)\\/([gimyu]*)$/.exec(re.toString());\n  return new RegExp(regexMatch[1], regexMatch[2]);\n}\n\nfunction clone(arg) {\n  if (typeof arg !== 'object') {\n    return arg;\n  }\n  if (arg === null) {\n    return null;\n  }\n  if (isArray(arg)) {\n    return arg.map(clone);\n  }\n  if (arg instanceof Date) {\n    return new Date(arg.getTime());\n  }\n  if (arg instanceof RegExp) {\n    return cloneRegExp(arg);\n  }\n  var cloned = {};\n  for (var name in arg) {\n    if (Object.prototype.hasOwnProperty.call(arg, name)) {\n      cloned[name] = clone(arg[name]);\n    }\n  }\n  return cloned;\n}\n\nmodule.exports = clone;\n","\nvar Pipe = require('../pipe').Pipe;\n\nvar Context = function Context(){\n};\n\nContext.prototype.setResult = function(result) {\n\tthis.result = result;\n\tthis.hasResult = true;\n\treturn this;\n};\n\nContext.prototype.exit = function() {\n\tthis.exiting = true;\n\treturn this;\n};\n\nContext.prototype.switchTo = function(next, pipe) {\n\tif (typeof next === 'string' || next instanceof Pipe) {\n\t\tthis.nextPipe = next;\n\t} else {\n\t\tthis.next = next;\n\t\tif (pipe) {\n\t\t\tthis.nextPipe = pipe;\n\t\t}\n\t}\n\treturn this;\n};\n\nContext.prototype.push = function(child, name) {\n\tchild.parent = this;\n\tif (typeof name !== 'undefined') {\n\t\tchild.childName = name;\n\t}\n\tchild.root = this.root || this;\n\tchild.options = child.options || this.options;\n\tif (!this.children) {\n\t\tthis.children = [child];\n\t\tthis.nextAfterChildren = this.next || null;\n\t\tthis.next = child;\n\t} else {\n\t\tthis.children[this.children.length - 1].next = child;\n\t\tthis.children.push(child);\n\t}\n\tchild.next = this;\n\treturn this;\n};\n\nexports.Context = Context;\n","var Context = require('./context').Context;\nvar defaultClone = require('../clone');\n\nvar DiffContext = function DiffContext(left, right) {\n  this.left = left;\n  this.right = right;\n  this.pipe = 'diff';\n};\n\nDiffContext.prototype = new Context();\n\nDiffContext.prototype.setResult = function(result) {\n  if (this.options.cloneDiffValues && typeof result === 'object') {\n    var clone = typeof this.options.cloneDiffValues === 'function' ?\n      this.options.cloneDiffValues : defaultClone;\n    if (typeof result[0] === 'object') {\n      result[0] = clone(result[0]);\n    }\n    if (typeof result[1] === 'object') {\n      result[1] = clone(result[1]);\n    }\n  }\n  return Context.prototype.setResult.apply(this, arguments);\n};\n\nexports.DiffContext = DiffContext;\n","var Context = require('./context').Context;\n\nvar PatchContext = function PatchContext(left, delta) {\n  this.left = left;\n  this.delta = delta;\n  this.pipe = 'patch';\n};\n\nPatchContext.prototype = new Context();\n\nexports.PatchContext = PatchContext;\n","var Context = require('./context').Context;\n\nvar ReverseContext = function ReverseContext(delta) {\n  this.delta = delta;\n  this.pipe = 'reverse';\n};\n\nReverseContext.prototype = new Context();\n\nexports.ReverseContext = ReverseContext;\n","// use as 2nd parameter for JSON.parse to revive Date instances\nmodule.exports = function dateReviver(key, value) {\n  var parts;\n  if (typeof value === 'string') {\n    parts = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d*))?(Z|([+\\-])(\\d{2}):(\\d{2}))$/.exec(value);\n    if (parts) {\n      return new Date(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4], +parts[5], +parts[6], +(parts[7] || 0)));\n    }\n  }\n  return value;\n};\n","var Processor = require('./processor').Processor;\nvar Pipe = require('./pipe').Pipe;\nvar DiffContext = require('./contexts/diff').DiffContext;\nvar PatchContext = require('./contexts/patch').PatchContext;\nvar ReverseContext = require('./contexts/reverse').ReverseContext;\n\nvar clone = require('./clone');\n\nvar trivial = require('./filters/trivial');\nvar nested = require('./filters/nested');\nvar arrays = require('./filters/arrays');\nvar dates = require('./filters/dates');\nvar texts = require('./filters/texts');\n\nvar DiffPatcher = function DiffPatcher(options) {\n  this.processor = new Processor(options);\n  this.processor.pipe(new Pipe('diff').append(\n    nested.collectChildrenDiffFilter,\n    trivial.diffFilter,\n    dates.diffFilter,\n    texts.diffFilter,\n    nested.objectsDiffFilter,\n    arrays.diffFilter\n  ).shouldHaveResult());\n  this.processor.pipe(new Pipe('patch').append(\n    nested.collectChildrenPatchFilter,\n    arrays.collectChildrenPatchFilter,\n    trivial.patchFilter,\n    texts.patchFilter,\n    nested.patchFilter,\n    arrays.patchFilter\n  ).shouldHaveResult());\n  this.processor.pipe(new Pipe('reverse').append(\n    nested.collectChildrenReverseFilter,\n    arrays.collectChildrenReverseFilter,\n    trivial.reverseFilter,\n    texts.reverseFilter,\n    nested.reverseFilter,\n    arrays.reverseFilter\n  ).shouldHaveResult());\n};\n\nDiffPatcher.prototype.options = function() {\n  return this.processor.options.apply(this.processor, arguments);\n};\n\nDiffPatcher.prototype.diff = function(left, right) {\n  return this.processor.process(new DiffContext(left, right));\n};\n\nDiffPatcher.prototype.patch = function(left, delta) {\n  return this.processor.process(new PatchContext(left, delta));\n};\n\nDiffPatcher.prototype.reverse = function(delta) {\n  return this.processor.process(new ReverseContext(delta));\n};\n\nDiffPatcher.prototype.unpatch = function(right, delta) {\n  return this.patch(right, this.reverse(delta));\n};\n\nDiffPatcher.prototype.clone = function(value) {\n  return clone(value);\n};\n\nexports.DiffPatcher = DiffPatcher;\n","\nexports.isBrowser = typeof window !== 'undefined';\n","var DiffContext = require('../contexts/diff').DiffContext;\nvar PatchContext = require('../contexts/patch').PatchContext;\nvar ReverseContext = require('../contexts/reverse').ReverseContext;\n\nvar lcs = require('./lcs');\n\nvar ARRAY_MOVE = 3;\n\nvar isArray = (typeof Array.isArray === 'function') ?\n  // use native function\n  Array.isArray :\n  // use instanceof operator\n  function(a) {\n    return a instanceof Array;\n  };\n\nvar arrayIndexOf = typeof Array.prototype.indexOf === 'function' ?\n  function(array, item) {\n    return array.indexOf(item);\n  } : function(array, item) {\n    var length = array.length;\n    for (var i = 0; i < length; i++) {\n      if (array[i] === item) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\nfunction arraysHaveMatchByRef(array1, array2, len1, len2) {\n  for (var index1 = 0; index1 < len1; index1++) {\n    var val1 = array1[index1];\n    for (var index2 = 0; index2 < len2; index2++) {\n      var val2 = array2[index2];\n      if (index1 !== index2 && val1 === val2) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction matchItems(array1, array2, index1, index2, context) {\n  var value1 = array1[index1];\n  var value2 = array2[index2];\n  if (value1 === value2) {\n    return true;\n  }\n  if (typeof value1 !== 'object' || typeof value2 !== 'object') {\n    return false;\n  }\n  var objectHash = context.objectHash;\n  if (!objectHash) {\n    // no way to match objects was provided, try match by position\n    return context.matchByPosition && index1 === index2;\n  }\n  var hash1;\n  var hash2;\n  if (typeof index1 === 'number') {\n    context.hashCache1 = context.hashCache1 || [];\n    hash1 = context.hashCache1[index1];\n    if (typeof hash1 === 'undefined') {\n      context.hashCache1[index1] = hash1 = objectHash(value1, index1);\n    }\n  } else {\n    hash1 = objectHash(value1);\n  }\n  if (typeof hash1 === 'undefined') {\n    return false;\n  }\n  if (typeof index2 === 'number') {\n    context.hashCache2 = context.hashCache2 || [];\n    hash2 = context.hashCache2[index2];\n    if (typeof hash2 === 'undefined') {\n      context.hashCache2[index2] = hash2 = objectHash(value2, index2);\n    }\n  } else {\n    hash2 = objectHash(value2);\n  }\n  if (typeof hash2 === 'undefined') {\n    return false;\n  }\n  return hash1 === hash2;\n}\n\nvar diffFilter = function arraysDiffFilter(context) {\n  if (!context.leftIsArray) {\n    return;\n  }\n\n  var matchContext = {\n    objectHash: context.options && context.options.objectHash,\n    matchByPosition: context.options && context.options.matchByPosition\n  };\n  var commonHead = 0;\n  var commonTail = 0;\n  var index;\n  var index1;\n  var index2;\n  var array1 = context.left;\n  var array2 = context.right;\n  var len1 = array1.length;\n  var len2 = array2.length;\n\n  var child;\n\n  if (len1 > 0 && len2 > 0 && !matchContext.objectHash &&\n    typeof matchContext.matchByPosition !== 'boolean') {\n    matchContext.matchByPosition = !arraysHaveMatchByRef(array1, array2, len1, len2);\n  }\n\n  // separate common head\n  while (commonHead < len1 && commonHead < len2 &&\n    matchItems(array1, array2, commonHead, commonHead, matchContext)) {\n    index = commonHead;\n    child = new DiffContext(context.left[index], context.right[index]);\n    context.push(child, index);\n    commonHead++;\n  }\n  // separate common tail\n  while (commonTail + commonHead < len1 && commonTail + commonHead < len2 &&\n    matchItems(array1, array2, len1 - 1 - commonTail, len2 - 1 - commonTail, matchContext)) {\n    index1 = len1 - 1 - commonTail;\n    index2 = len2 - 1 - commonTail;\n    child = new DiffContext(context.left[index1], context.right[index2]);\n    context.push(child, index2);\n    commonTail++;\n  }\n  var result;\n  if (commonHead + commonTail === len1) {\n    if (len1 === len2) {\n      // arrays are identical\n      context.setResult(undefined).exit();\n      return;\n    }\n    // trivial case, a block (1 or more consecutive items) was added\n    result = result || {\n      _t: 'a'\n    };\n    for (index = commonHead; index < len2 - commonTail; index++) {\n      result[index] = [array2[index]];\n    }\n    context.setResult(result).exit();\n    return;\n  }\n  if (commonHead + commonTail === len2) {\n    // trivial case, a block (1 or more consecutive items) was removed\n    result = result || {\n      _t: 'a'\n    };\n    for (index = commonHead; index < len1 - commonTail; index++) {\n      result['_' + index] = [array1[index], 0, 0];\n    }\n    context.setResult(result).exit();\n    return;\n  }\n  // reset hash cache\n  delete matchContext.hashCache1;\n  delete matchContext.hashCache2;\n\n  // diff is not trivial, find the LCS (Longest Common Subsequence)\n  var trimmed1 = array1.slice(commonHead, len1 - commonTail);\n  var trimmed2 = array2.slice(commonHead, len2 - commonTail);\n  var seq = lcs.get(\n    trimmed1, trimmed2,\n    matchItems,\n    matchContext\n  );\n  var removedItems = [];\n  result = result || {\n    _t: 'a'\n  };\n  for (index = commonHead; index < len1 - commonTail; index++) {\n    if (arrayIndexOf(seq.indices1, index - commonHead) < 0) {\n      // removed\n      result['_' + index] = [array1[index], 0, 0];\n      removedItems.push(index);\n    }\n  }\n\n  var detectMove = true;\n  if (context.options && context.options.arrays && context.options.arrays.detectMove === false) {\n    detectMove = false;\n  }\n  var includeValueOnMove = false;\n  if (context.options && context.options.arrays && context.options.arrays.includeValueOnMove) {\n    includeValueOnMove = true;\n  }\n\n  var removedItemsLength = removedItems.length;\n  for (index = commonHead; index < len2 - commonTail; index++) {\n    var indexOnArray2 = arrayIndexOf(seq.indices2, index - commonHead);\n    if (indexOnArray2 < 0) {\n      // added, try to match with a removed item and register as position move\n      var isMove = false;\n      if (detectMove && removedItemsLength > 0) {\n        for (var removeItemIndex1 = 0; removeItemIndex1 < removedItemsLength; removeItemIndex1++) {\n          index1 = removedItems[removeItemIndex1];\n          if (matchItems(trimmed1, trimmed2, index1 - commonHead,\n            index - commonHead, matchContext)) {\n            // store position move as: [originalValue, newPosition, ARRAY_MOVE]\n            result['_' + index1].splice(1, 2, index, ARRAY_MOVE);\n            if (!includeValueOnMove) {\n              // don't include moved value on diff, to save bytes\n              result['_' + index1][0] = '';\n            }\n\n            index2 = index;\n            child = new DiffContext(context.left[index1], context.right[index2]);\n            context.push(child, index2);\n            removedItems.splice(removeItemIndex1, 1);\n            isMove = true;\n            break;\n          }\n        }\n      }\n      if (!isMove) {\n        // added\n        result[index] = [array2[index]];\n      }\n    } else {\n      // match, do inner diff\n      index1 = seq.indices1[indexOnArray2] + commonHead;\n      index2 = seq.indices2[indexOnArray2] + commonHead;\n      child = new DiffContext(context.left[index1], context.right[index2]);\n      context.push(child, index2);\n    }\n  }\n\n  context.setResult(result).exit();\n\n};\ndiffFilter.filterName = 'arrays';\n\nvar compare = {\n  numerically: function(a, b) {\n    return a - b;\n  },\n  numericallyBy: function(name) {\n    return function(a, b) {\n      return a[name] - b[name];\n    };\n  }\n};\n\nvar patchFilter = function nestedPatchFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var index, index1;\n\n  var delta = context.delta;\n  var array = context.left;\n\n  // first, separate removals, insertions and modifications\n  var toRemove = [];\n  var toInsert = [];\n  var toModify = [];\n  for (index in delta) {\n    if (index !== '_t') {\n      if (index[0] === '_') {\n        // removed item from original array\n        if (delta[index][2] === 0 || delta[index][2] === ARRAY_MOVE) {\n          toRemove.push(parseInt(index.slice(1), 10));\n        } else {\n          throw new Error('only removal or move can be applied at original array indices' +\n            ', invalid diff type: ' + delta[index][2]);\n        }\n      } else {\n        if (delta[index].length === 1) {\n          // added item at new array\n          toInsert.push({\n            index: parseInt(index, 10),\n            value: delta[index][0]\n          });\n        } else {\n          // modified item at new array\n          toModify.push({\n            index: parseInt(index, 10),\n            delta: delta[index]\n          });\n        }\n      }\n    }\n  }\n\n  // remove items, in reverse order to avoid sawing our own floor\n  toRemove = toRemove.sort(compare.numerically);\n  for (index = toRemove.length - 1; index >= 0; index--) {\n    index1 = toRemove[index];\n    var indexDiff = delta['_' + index1];\n    var removedValue = array.splice(index1, 1)[0];\n    if (indexDiff[2] === ARRAY_MOVE) {\n      // reinsert later\n      toInsert.push({\n        index: indexDiff[1],\n        value: removedValue\n      });\n    }\n  }\n\n  // insert items, in reverse order to avoid moving our own floor\n  toInsert = toInsert.sort(compare.numericallyBy('index'));\n  var toInsertLength = toInsert.length;\n  for (index = 0; index < toInsertLength; index++) {\n    var insertion = toInsert[index];\n    array.splice(insertion.index, 0, insertion.value);\n  }\n\n  // apply modifications\n  var toModifyLength = toModify.length;\n  var child;\n  if (toModifyLength > 0) {\n    for (index = 0; index < toModifyLength; index++) {\n      var modification = toModify[index];\n      child = new PatchContext(context.left[modification.index], modification.delta);\n      context.push(child, modification.index);\n    }\n  }\n\n  if (!context.children) {\n    context.setResult(context.left).exit();\n    return;\n  }\n  context.exit();\n};\npatchFilter.filterName = 'arrays';\n\nvar collectChildrenPatchFilter = function collectChildrenPatchFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var length = context.children.length;\n  var child;\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    context.left[child.childName] = child.result;\n  }\n  context.setResult(context.left).exit();\n};\ncollectChildrenPatchFilter.filterName = 'arraysCollectChildren';\n\nvar reverseFilter = function arraysReverseFilter(context) {\n  if (!context.nested) {\n    if (context.delta[2] === ARRAY_MOVE) {\n      context.newName = '_' + context.delta[1];\n      context.setResult([context.delta[0], parseInt(context.childName.substr(1), 10), ARRAY_MOVE]).exit();\n    }\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var name, child;\n  for (name in context.delta) {\n    if (name === '_t') {\n      continue;\n    }\n    child = new ReverseContext(context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\nreverseFilter.filterName = 'arrays';\n\nvar reverseArrayDeltaIndex = function(delta, index, itemDelta) {\n  if (typeof index === 'string' && index[0] === '_') {\n    return parseInt(index.substr(1), 10);\n  } else if (isArray(itemDelta) && itemDelta[2] === 0) {\n    return '_' + index;\n  }\n\n  var reverseIndex = +index;\n  for (var deltaIndex in delta) {\n    var deltaItem = delta[deltaIndex];\n    if (isArray(deltaItem)) {\n      if (deltaItem[2] === ARRAY_MOVE) {\n        var moveFromIndex = parseInt(deltaIndex.substr(1), 10);\n        var moveToIndex = deltaItem[1];\n        if (moveToIndex === +index) {\n          return moveFromIndex;\n        }\n        if (moveFromIndex <= reverseIndex && moveToIndex > reverseIndex) {\n          reverseIndex++;\n        } else if (moveFromIndex >= reverseIndex && moveToIndex < reverseIndex) {\n          reverseIndex--;\n        }\n      } else if (deltaItem[2] === 0) {\n        var deleteIndex = parseInt(deltaIndex.substr(1), 10);\n        if (deleteIndex <= reverseIndex) {\n          reverseIndex++;\n        }\n      } else if (deltaItem.length === 1 && deltaIndex <= reverseIndex) {\n        reverseIndex--;\n      }\n    }\n  }\n\n  return reverseIndex;\n};\n\nvar collectChildrenReverseFilter = function collectChildrenReverseFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var length = context.children.length;\n  var child;\n  var delta = {\n    _t: 'a'\n  };\n\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    var name = child.newName;\n    if (typeof name === 'undefined') {\n      name = reverseArrayDeltaIndex(context.delta, child.childName, child.result);\n    }\n    if (delta[name] !== child.result) {\n      delta[name] = child.result;\n    }\n  }\n  context.setResult(delta).exit();\n};\ncollectChildrenReverseFilter.filterName = 'arraysCollectChildren';\n\nexports.diffFilter = diffFilter;\nexports.patchFilter = patchFilter;\nexports.collectChildrenPatchFilter = collectChildrenPatchFilter;\nexports.reverseFilter = reverseFilter;\nexports.collectChildrenReverseFilter = collectChildrenReverseFilter;\n","var diffFilter = function datesDiffFilter(context) {\n  if (context.left instanceof Date) {\n    if (context.right instanceof Date) {\n      if (context.left.getTime() !== context.right.getTime()) {\n        context.setResult([context.left, context.right]);\n      } else {\n        context.setResult(undefined);\n      }\n    } else {\n      context.setResult([context.left, context.right]);\n    }\n    context.exit();\n  } else if (context.right instanceof Date) {\n    context.setResult([context.left, context.right]).exit();\n  }\n};\ndiffFilter.filterName = 'dates';\n\nexports.diffFilter = diffFilter;\n","/*\n\nLCS implementation that supports arrays or strings\n\nreference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n\n*/\n\nvar defaultMatch = function(array1, array2, index1, index2) {\n  return array1[index1] === array2[index2];\n};\n\nvar lengthMatrix = function(array1, array2, match, context) {\n  var len1 = array1.length;\n  var len2 = array2.length;\n  var x, y;\n\n  // initialize empty matrix of len1+1 x len2+1\n  var matrix = [len1 + 1];\n  for (x = 0; x < len1 + 1; x++) {\n    matrix[x] = [len2 + 1];\n    for (y = 0; y < len2 + 1; y++) {\n      matrix[x][y] = 0;\n    }\n  }\n  matrix.match = match;\n  // save sequence lengths for each coordinate\n  for (x = 1; x < len1 + 1; x++) {\n    for (y = 1; y < len2 + 1; y++) {\n      if (match(array1, array2, x - 1, y - 1, context)) {\n        matrix[x][y] = matrix[x - 1][y - 1] + 1;\n      } else {\n        matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1]);\n      }\n    }\n  }\n  return matrix;\n};\n\nvar backtrack = function(matrix, array1, array2, index1, index2, context) {\n  if (index1 === 0 || index2 === 0) {\n    return {\n      sequence: [],\n      indices1: [],\n      indices2: []\n    };\n  }\n\n  if (matrix.match(array1, array2, index1 - 1, index2 - 1, context)) {\n    var subsequence = backtrack(matrix, array1, array2, index1 - 1, index2 - 1, context);\n    subsequence.sequence.push(array1[index1 - 1]);\n    subsequence.indices1.push(index1 - 1);\n    subsequence.indices2.push(index2 - 1);\n    return subsequence;\n  }\n\n  if (matrix[index1][index2 - 1] > matrix[index1 - 1][index2]) {\n    return backtrack(matrix, array1, array2, index1, index2 - 1, context);\n  } else {\n    return backtrack(matrix, array1, array2, index1 - 1, index2, context);\n  }\n};\n\nvar get = function(array1, array2, match, context) {\n  context = context || {};\n  var matrix = lengthMatrix(array1, array2, match || defaultMatch, context);\n  var result = backtrack(matrix, array1, array2, array1.length, array2.length, context);\n  if (typeof array1 === 'string' && typeof array2 === 'string') {\n    result.sequence = result.sequence.join('');\n  }\n  return result;\n};\n\nexports.get = get;\n","var DiffContext = require('../contexts/diff').DiffContext;\nvar PatchContext = require('../contexts/patch').PatchContext;\nvar ReverseContext = require('../contexts/reverse').ReverseContext;\n\nvar collectChildrenDiffFilter = function collectChildrenDiffFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  var length = context.children.length;\n  var child;\n  var result = context.result;\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    if (typeof child.result === 'undefined') {\n      continue;\n    }\n    result = result || {};\n    result[child.childName] = child.result;\n  }\n  if (result && context.leftIsArray) {\n    result._t = 'a';\n  }\n  context.setResult(result).exit();\n};\ncollectChildrenDiffFilter.filterName = 'collectChildren';\n\nvar objectsDiffFilter = function objectsDiffFilter(context) {\n  if (context.leftIsArray || context.leftType !== 'object') {\n    return;\n  }\n\n  var name, child, propertyFilter = context.options.propertyFilter;\n  for (name in context.left) {\n    if (!Object.prototype.hasOwnProperty.call(context.left, name)) {\n      continue;\n    }\n    if (propertyFilter && !propertyFilter(name, context)) {\n      continue;\n    }\n    child = new DiffContext(context.left[name], context.right[name]);\n    context.push(child, name);\n  }\n  for (name in context.right) {\n    if (!Object.prototype.hasOwnProperty.call(context.right, name)) {\n      continue;\n    }\n    if (propertyFilter && !propertyFilter(name, context)) {\n      continue;\n    }\n    if (typeof context.left[name] === 'undefined') {\n      child = new DiffContext(undefined, context.right[name]);\n      context.push(child, name);\n    }\n  }\n\n  if (!context.children || context.children.length === 0) {\n    context.setResult(undefined).exit();\n    return;\n  }\n  context.exit();\n};\nobjectsDiffFilter.filterName = 'objects';\n\nvar patchFilter = function nestedPatchFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var name, child;\n  for (name in context.delta) {\n    child = new PatchContext(context.left[name], context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\npatchFilter.filterName = 'objects';\n\nvar collectChildrenPatchFilter = function collectChildrenPatchFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var length = context.children.length;\n  var child;\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    if (Object.prototype.hasOwnProperty.call(context.left, child.childName) && child.result === undefined) {\n      delete context.left[child.childName];\n    } else if (context.left[child.childName] !== child.result) {\n      context.left[child.childName] = child.result;\n    }\n  }\n  context.setResult(context.left).exit();\n};\ncollectChildrenPatchFilter.filterName = 'collectChildren';\n\nvar reverseFilter = function nestedReverseFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var name, child;\n  for (name in context.delta) {\n    child = new ReverseContext(context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\nreverseFilter.filterName = 'objects';\n\nvar collectChildrenReverseFilter = function collectChildrenReverseFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var length = context.children.length;\n  var child;\n  var delta = {};\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    if (delta[child.childName] !== child.result) {\n      delta[child.childName] = child.result;\n    }\n  }\n  context.setResult(delta).exit();\n};\ncollectChildrenReverseFilter.filterName = 'collectChildren';\n\nexports.collectChildrenDiffFilter = collectChildrenDiffFilter;\nexports.objectsDiffFilter = objectsDiffFilter;\nexports.patchFilter = patchFilter;\nexports.collectChildrenPatchFilter = collectChildrenPatchFilter;\nexports.reverseFilter = reverseFilter;\nexports.collectChildrenReverseFilter = collectChildrenReverseFilter;\n","/* global diff_match_patch */\nvar TEXT_DIFF = 2;\nvar DEFAULT_MIN_LENGTH = 60;\nvar cachedDiffPatch = null;\n\nvar getDiffMatchPatch = function(required) {\n  /*jshint camelcase: false */\n\n  if (!cachedDiffPatch) {\n    var instance;\n    if (typeof diff_match_patch !== 'undefined') {\n      // already loaded, probably a browser\n      instance = typeof diff_match_patch === 'function' ?\n        new diff_match_patch() : new diff_match_patch.diff_match_patch();\n    } else if (typeof require === 'function') {\n      try {\n        var dmpModuleName = 'diff_match_patch_uncompressed';\n        var dmp = require('../../public/external/' + dmpModuleName);\n        instance = new dmp.diff_match_patch();\n      } catch (err) {\n        instance = null;\n      }\n    }\n    if (!instance) {\n      if (!required) {\n        return null;\n      }\n      var error = new Error('text diff_match_patch library not found');\n      error.diff_match_patch_not_found = true;\n      throw error;\n    }\n    cachedDiffPatch = {\n      diff: function(txt1, txt2) {\n        return instance.patch_toText(instance.patch_make(txt1, txt2));\n      },\n      patch: function(txt1, patch) {\n        var results = instance.patch_apply(instance.patch_fromText(patch), txt1);\n        for (var i = 0; i < results[1].length; i++) {\n          if (!results[1][i]) {\n            var error = new Error('text patch failed');\n            error.textPatchFailed = true;\n          }\n        }\n        return results[0];\n      }\n    };\n  }\n  return cachedDiffPatch;\n};\n\nvar diffFilter = function textsDiffFilter(context) {\n  if (context.leftType !== 'string') {\n    return;\n  }\n  var minLength = (context.options && context.options.textDiff &&\n    context.options.textDiff.minLength) || DEFAULT_MIN_LENGTH;\n  if (context.left.length < minLength ||\n    context.right.length < minLength) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  // large text, try to use a text-diff algorithm\n  var diffMatchPatch = getDiffMatchPatch();\n  if (!diffMatchPatch) {\n    // diff-match-patch library not available, fallback to regular string replace\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  var diff = diffMatchPatch.diff;\n  context.setResult([diff(context.left, context.right), 0, TEXT_DIFF]).exit();\n};\ndiffFilter.filterName = 'texts';\n\nvar patchFilter = function textsPatchFilter(context) {\n  if (context.nested) {\n    return;\n  }\n  if (context.delta[2] !== TEXT_DIFF) {\n    return;\n  }\n\n  // text-diff, use a text-patch algorithm\n  var patch = getDiffMatchPatch(true).patch;\n  context.setResult(patch(context.left, context.delta[0])).exit();\n};\npatchFilter.filterName = 'texts';\n\nvar textDeltaReverse = function(delta) {\n  var i, l, lines, line, lineTmp, header = null,\n    headerRegex = /^@@ +\\-(\\d+),(\\d+) +\\+(\\d+),(\\d+) +@@$/,\n    lineHeader, lineAdd, lineRemove;\n  lines = delta.split('\\n');\n  for (i = 0, l = lines.length; i < l; i++) {\n    line = lines[i];\n    var lineStart = line.slice(0, 1);\n    if (lineStart === '@') {\n      header = headerRegex.exec(line);\n      lineHeader = i;\n      lineAdd = null;\n      lineRemove = null;\n\n      // fix header\n      lines[lineHeader] = '@@ -' + header[3] + ',' + header[4] + ' +' + header[1] + ',' + header[2] + ' @@';\n    } else if (lineStart === '+') {\n      lineAdd = i;\n      lines[i] = '-' + lines[i].slice(1);\n      if (lines[i - 1].slice(0, 1) === '+') {\n        // swap lines to keep default order (-+)\n        lineTmp = lines[i];\n        lines[i] = lines[i - 1];\n        lines[i - 1] = lineTmp;\n      }\n    } else if (lineStart === '-') {\n      lineRemove = i;\n      lines[i] = '+' + lines[i].slice(1);\n    }\n  }\n  return lines.join('\\n');\n};\n\nvar reverseFilter = function textsReverseFilter(context) {\n  if (context.nested) {\n    return;\n  }\n  if (context.delta[2] !== TEXT_DIFF) {\n    return;\n  }\n\n  // text-diff, use a text-diff algorithm\n  context.setResult([textDeltaReverse(context.delta[0]), 0, TEXT_DIFF]).exit();\n};\nreverseFilter.filterName = 'texts';\n\nexports.diffFilter = diffFilter;\nexports.patchFilter = patchFilter;\nexports.reverseFilter = reverseFilter;\n","var isArray = (typeof Array.isArray === 'function') ?\n  // use native function\n  Array.isArray :\n  // use instanceof operator\n  function(a) {\n    return a instanceof Array;\n  };\n\nvar diffFilter = function trivialMatchesDiffFilter(context) {\n  if (context.left === context.right) {\n    context.setResult(undefined).exit();\n    return;\n  }\n  if (typeof context.left === 'undefined') {\n    if (typeof context.right === 'function') {\n      throw new Error('functions are not supported');\n    }\n    context.setResult([context.right]).exit();\n    return;\n  }\n  if (typeof context.right === 'undefined') {\n    context.setResult([context.left, 0, 0]).exit();\n    return;\n  }\n  if (typeof context.left === 'function' || typeof context.right === 'function') {\n    throw new Error('functions are not supported');\n  }\n  context.leftType = context.left === null ? 'null' : typeof context.left;\n  context.rightType = context.right === null ? 'null' : typeof context.right;\n  if (context.leftType !== context.rightType) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  if (context.leftType === 'boolean' || context.leftType === 'number') {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  if (context.leftType === 'object') {\n    context.leftIsArray = isArray(context.left);\n  }\n  if (context.rightType === 'object') {\n    context.rightIsArray = isArray(context.right);\n  }\n  if (context.leftIsArray !== context.rightIsArray) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n\n  if (context.left instanceof RegExp) {\n    if (context.right instanceof RegExp) {\n      context.setResult([context.left.toString(), context.right.toString()]).exit();\n    } else {\n      context.setResult([context.left, context.right]).exit();\n      return;\n    }\n  }\n};\ndiffFilter.filterName = 'trivial';\n\nvar patchFilter = function trivialMatchesPatchFilter(context) {\n  if (typeof context.delta === 'undefined') {\n    context.setResult(context.left).exit();\n    return;\n  }\n  context.nested = !isArray(context.delta);\n  if (context.nested) {\n    return;\n  }\n  if (context.delta.length === 1) {\n    context.setResult(context.delta[0]).exit();\n    return;\n  }\n  if (context.delta.length === 2) {\n    if (context.left instanceof RegExp) {\n      var regexArgs = /^\\/(.*)\\/([gimyu]+)$/.exec(context.delta[1]);\n      if (regexArgs) {\n        context.setResult(new RegExp(regexArgs[1], regexArgs[2])).exit();\n        return;\n      }\n    }\n    context.setResult(context.delta[1]).exit();\n    return;\n  }\n  if (context.delta.length === 3 && context.delta[2] === 0) {\n    context.setResult(undefined).exit();\n    return;\n  }\n};\npatchFilter.filterName = 'trivial';\n\nvar reverseFilter = function trivialReferseFilter(context) {\n  if (typeof context.delta === 'undefined') {\n    context.setResult(context.delta).exit();\n    return;\n  }\n  context.nested = !isArray(context.delta);\n  if (context.nested) {\n    return;\n  }\n  if (context.delta.length === 1) {\n    context.setResult([context.delta[0], 0, 0]).exit();\n    return;\n  }\n  if (context.delta.length === 2) {\n    context.setResult([context.delta[1], context.delta[0]]).exit();\n    return;\n  }\n  if (context.delta.length === 3 && context.delta[2] === 0) {\n    context.setResult([context.delta[0]]).exit();\n    return;\n  }\n};\nreverseFilter.filterName = 'trivial';\n\nexports.diffFilter = diffFilter;\nexports.patchFilter = patchFilter;\nexports.reverseFilter = reverseFilter;\n","\nvar environment = require('./environment');\n\nvar DiffPatcher = require('./diffpatcher').DiffPatcher;\nexports.DiffPatcher = DiffPatcher;\n\nexports.create = function(options){\n  return new DiffPatcher(options);\n};\n\nexports.dateReviver = require('./date-reviver');\n\nvar defaultInstance;\n\nexports.diff = function() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.diff.apply(defaultInstance, arguments);\n};\n\nexports.patch = function() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.patch.apply(defaultInstance, arguments);\n};\n\nexports.unpatch = function() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.unpatch.apply(defaultInstance, arguments);\n};\n\nexports.reverse = function() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.reverse.apply(defaultInstance, arguments);\n};\n\nexports.clone = function() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.clone.apply(defaultInstance, arguments);\n};\n\n\nif (environment.isBrowser) {\n  exports.homepage = '{{package-homepage}}';\n  exports.version = '{{package-version}}';\n} else {\n  var packageInfoModuleName = '../package.json';\n  var packageInfo = require(packageInfoModuleName);\n  exports.homepage = packageInfo.homepage;\n  exports.version = packageInfo.version;\n\n  var formatterModuleName = './formatters';\n  var formatters = require(formatterModuleName);\n  exports.formatters = formatters;\n  // shortcut for console\n  exports.console = formatters.console;\n}\n","var Pipe = function Pipe(name) {\n  this.name = name;\n  this.filters = [];\n};\n\nPipe.prototype.process = function(input) {\n  if (!this.processor) {\n    throw new Error('add this pipe to a processor before using it');\n  }\n  var debug = this.debug;\n  var length = this.filters.length;\n  var context = input;\n  for (var index = 0; index < length; index++) {\n    var filter = this.filters[index];\n    if (debug) {\n      this.log('filter: ' + filter.filterName);\n    }\n    filter(context);\n    if (typeof context === 'object' && context.exiting) {\n      context.exiting = false;\n      break;\n    }\n  }\n  if (!context.next && this.resultCheck) {\n    this.resultCheck(context);\n  }\n};\n\nPipe.prototype.log = function(msg) {\n  console.log('[jsondiffpatch] ' + this.name + ' pipe, ' + msg);\n};\n\nPipe.prototype.append = function() {\n  this.filters.push.apply(this.filters, arguments);\n  return this;\n};\n\nPipe.prototype.prepend = function() {\n  this.filters.unshift.apply(this.filters, arguments);\n  return this;\n};\n\nPipe.prototype.indexOf = function(filterName) {\n  if (!filterName) {\n    throw new Error('a filter name is required');\n  }\n  for (var index = 0; index < this.filters.length; index++) {\n    var filter = this.filters[index];\n    if (filter.filterName === filterName) {\n      return index;\n    }\n  }\n  throw new Error('filter not found: ' + filterName);\n};\n\nPipe.prototype.list = function() {\n  var names = [];\n  for (var index = 0; index < this.filters.length; index++) {\n    var filter = this.filters[index];\n    names.push(filter.filterName);\n  }\n  return names;\n};\n\nPipe.prototype.after = function(filterName) {\n  var index = this.indexOf(filterName);\n  var params = Array.prototype.slice.call(arguments, 1);\n  if (!params.length) {\n    throw new Error('a filter is required');\n  }\n  params.unshift(index + 1, 0);\n  Array.prototype.splice.apply(this.filters, params);\n  return this;\n};\n\nPipe.prototype.before = function(filterName) {\n  var index = this.indexOf(filterName);\n  var params = Array.prototype.slice.call(arguments, 1);\n  if (!params.length) {\n    throw new Error('a filter is required');\n  }\n  params.unshift(index, 0);\n  Array.prototype.splice.apply(this.filters, params);\n  return this;\n};\n\nPipe.prototype.clear = function() {\n  this.filters.length = 0;\n  return this;\n};\n\nPipe.prototype.shouldHaveResult = function(should) {\n  if (should === false) {\n    this.resultCheck = null;\n    return;\n  }\n  if (this.resultCheck) {\n    return;\n  }\n  var pipe = this;\n  this.resultCheck = function(context) {\n    if (!context.hasResult) {\n      console.log(context);\n      var error = new Error(pipe.name + ' failed');\n      error.noResult = true;\n      throw error;\n    }\n  };\n  return this;\n};\n\nexports.Pipe = Pipe;\n","\nvar Processor = function Processor(options){\n  this.selfOptions = options || {};\n  this.pipes = {};\n};\n\nProcessor.prototype.options = function(options) {\n  if (options) {\n    this.selfOptions = options;\n  }\n  return this.selfOptions;\n};\n\nProcessor.prototype.pipe = function(name, pipe) {\n  if (typeof name === 'string') {\n    if (typeof pipe === 'undefined') {\n      return this.pipes[name];\n    } else {\n      this.pipes[name] = pipe;\n    }\n  }\n  if (name && name.name) {\n    pipe = name;\n    if (pipe.processor === this) { return pipe; }\n    this.pipes[pipe.name] = pipe;\n  }\n  pipe.processor = this;\n  return pipe;\n};\n\nProcessor.prototype.process = function(input, pipe) {\n  var context = input;\n  context.options = this.options();\n  var nextPipe = pipe || input.pipe || 'default';\n  var lastPipe, lastContext;\n  while (nextPipe) {\n    if (typeof context.nextAfterChildren !== 'undefined') {\n      // children processed and coming back to parent\n      context.next = context.nextAfterChildren;\n      context.nextAfterChildren = null;\n    }\n\n    if (typeof nextPipe === 'string') {\n      nextPipe = this.pipe(nextPipe);\n    }\n    nextPipe.process(context);\n    lastContext = context;\n    lastPipe = nextPipe;\n    nextPipe = null;\n    if (context) {\n      if (context.next) {\n        context = context.next;\n        nextPipe = lastContext.nextPipe || context.pipe || lastPipe;\n      }\n    }\n  }\n  return context.hasResult ? context.result : undefined;\n};\n\nexports.Processor = Processor;\n"]}