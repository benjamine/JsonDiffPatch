{"version":3,"file":"bundle.js","sources":["/source-files/jsondiffpatch/node_modules/fiberglass/node_modules/browserify/node_modules/browser-pack/_prelude.js","/source-files/jsondiffpatch/src/main.js","/source-files/jsondiffpatch/src/environment.js","/source-files/jsondiffpatch/src/diffpatcher.js","/source-files/jsondiffpatch/src/date-reviver.js","/source-files/jsondiffpatch/src/processor.js","/source-files/jsondiffpatch/src/pipe.js","/source-files/jsondiffpatch/src/contexts/diff.js","/source-files/jsondiffpatch/src/contexts/patch.js","/source-files/jsondiffpatch/src/contexts/reverse.js","/source-files/jsondiffpatch/src/filters/trivial.js","/source-files/jsondiffpatch/src/filters/nested.js","/source-files/jsondiffpatch/src/filters/arrays.js","/source-files/jsondiffpatch/src/filters/dates.js","/source-files/jsondiffpatch/src/filters/texts.js","/source-files/jsondiffpatch/src/contexts/context.js","/source-files/jsondiffpatch/src/filters/lcs.js","/source-files/jsondiffpatch/node_modules/diff-match-patch/index.js"],"names":["exports","isBrowser","window","Processor","require","Pipe","DiffContext","PatchContext","ReverseContext","trivial","nested","arrays","dates","texts","DiffPatcher","options","this","processor","pipe","append","collectChildrenDiffFilter","diffFilter","objectsDiffFilter","shouldHaveResult","collectChildrenPatchFilter","patchFilter","collectChildrenReverseFilter","reverseFilter","prototype","apply","arguments","diff","left","right","process","patch","delta","reverse","unpatch","module","key","value","parts","exec","Date","UTC","selfOptions","pipes","name","input","context","lastPipe","lastContext","nextPipe","nextAfterChildren","next","hasResult","result","undefined","filters","Error","debug","length","index","filter","log","filterName","exiting","resultCheck","msg","console","push","prepend","unshift","indexOf","list","names","after","params","Array","slice","call","splice","before","clear","should","error","noResult","Context","isArray","a","setResult","exit","leftType","rightType","leftIsArray","rightIsArray","children","child","childName","_t","hasOwnProperty","arraysHaveMatchByRef","array1","array2","len1","len2","index1","val1","index2","val2","matchItems","value1","value2","objectHash","matchByPosition","hash1","hash2","hashCache1","hashCache2","lcs","ARRAY_MOVE","arrayIndexOf","array","item","i","matchContext","commonHead","commonTail","trimmed1","trimmed2","seq","get","removedItems","indices1","detectMove","includeValueOnMove","removedItemsLength","indexOnArray2","indices2","isMove","removeItemIndex1","compare","numerically","b","numericallyBy","toRemove","toInsert","toModify","parseInt","sort","indexDiff","removedValue","toInsertLength","insertion","toModifyLength","modification","newName","substr","reverseArrayDeltaIndex","itemDelta","reverseIndex","deltaIndex","deltaItem","moveFromIndex","moveToIndex","deleteIndex","getTime","TEXT_DIFF","DEFAULT_MIN_LENGTH","cachedDiffPatch","getDiffMatchPatch","instance","diff_match_patch","dmp","err","dmpModuleName","diff_match_patch_not_found","txt1","txt2","patch_toText","patch_make","results","patch_apply","patch_fromText","textPatchFailed","minLength","textDiff","textDeltaReverse","l","lines","line","lineTmp","lineHeader","lineAdd","lineRemove","header","headerRegex","split","lineStart","join","switchTo","parent","root","defaultMatch","lengthMatrix","match","x","y","matrix","Math","max","backtrack","sequence","subsequence","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","Diff","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","deadline","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","diff_cleanupMerge","longtext","shorttext","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","j","pop","text1_length","text2_length","max_d","ceil","v_offset","v_length","v1","v2","front","k1start","k1end","k2start","k2end","d","k1","x1","k1_offset","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","text1a","text2a","text1b","text2b","diffsb","diff_linesToCharsMunge_","text","chars","lineEnd","lineArrayLength","lineHash","String","fromCharCode","charCodeAt","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastequality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","diff_cleanupSemanticLossless","deletion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","op","data","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","param","decodeURI","ex","n","isNaN","match_main","match_bitap_","match_bitapScore_","e","accuracy","proximity","abs","s","match_alphabet_","score_threshold","best_loc","lastIndexOf","matchmask","bin_min","bin_mid","last_rd","bin_max","start","finish","rd","charMatch","patch_addContext_","start2","length1","padding","prefix","suffix","start1","length2","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","nullPadding","patch_addPadding","patch_splitMax","start_loc","expected_loc","end_loc","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","textline","textPointer","patchHeader","m","sign","toString","coords1","coords2"],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var environment=require(\"./environment\"),DiffPatcher=require(\"./diffpatcher\").DiffPatcher;exports.DiffPatcher=DiffPatcher,exports.create=function(e){return new DiffPatcher(e)},exports.dateReviver=require(\"./date-reviver\");var defaultInstance;if(exports.diff=function(){return defaultInstance||(defaultInstance=new DiffPatcher),defaultInstance.diff.apply(defaultInstance,arguments)},exports.patch=function(){return defaultInstance||(defaultInstance=new DiffPatcher),defaultInstance.patch.apply(defaultInstance,arguments)},exports.unpatch=function(){return defaultInstance||(defaultInstance=new DiffPatcher),defaultInstance.unpatch.apply(defaultInstance,arguments)},exports.reverse=function(){return defaultInstance||(defaultInstance=new DiffPatcher),defaultInstance.reverse.apply(defaultInstance,arguments)},environment.isBrowser)exports.homepage=\"{{package-homepage}}\",exports.version=\"{{package-version}}\";else{var packageInfoModuleName=\"../package.json\",packageInfo=require(packageInfoModuleName);exports.homepage=packageInfo.homepage,exports.version=packageInfo.version;var formatterModuleName=\"./formatters\",formatters=require(formatterModuleName);exports.formatters=formatters,exports.console=formatters.console}","\nexports.isBrowser = typeof window !== 'undefined';\n","var Processor = require('./processor').Processor;\nvar Pipe = require('./pipe').Pipe;\nvar DiffContext = require('./contexts/diff').DiffContext;\nvar PatchContext = require('./contexts/patch').PatchContext;\nvar ReverseContext = require('./contexts/reverse').ReverseContext;\n\nvar trivial = require('./filters/trivial');\nvar nested = require('./filters/nested');\nvar arrays = require('./filters/arrays');\nvar dates = require('./filters/dates');\nvar texts = require('./filters/texts');\n\nvar DiffPatcher = function DiffPatcher(options) {\n  this.processor = new Processor(options);\n  this.processor.pipe(new Pipe('diff').append(\n    nested.collectChildrenDiffFilter,\n    trivial.diffFilter,\n    dates.diffFilter,\n    texts.diffFilter,\n    nested.objectsDiffFilter,\n    arrays.diffFilter\n  ).shouldHaveResult());\n  this.processor.pipe(new Pipe('patch').append(\n    nested.collectChildrenPatchFilter,\n    arrays.collectChildrenPatchFilter,\n    trivial.patchFilter,\n    texts.patchFilter,\n    nested.patchFilter,\n    arrays.patchFilter\n  ).shouldHaveResult());\n  this.processor.pipe(new Pipe('reverse').append(\n    nested.collectChildrenReverseFilter,\n    arrays.collectChildrenReverseFilter,\n    trivial.reverseFilter,\n    texts.reverseFilter,\n    nested.reverseFilter,\n    arrays.reverseFilter\n  ).shouldHaveResult());\n};\n\nDiffPatcher.prototype.options = function() {\n  return this.processor.options.apply(this.processor, arguments);\n};\n\nDiffPatcher.prototype.diff = function(left, right) {\n  return this.processor.process(new DiffContext(left, right));\n};\n\nDiffPatcher.prototype.patch = function(left, delta) {\n  return this.processor.process(new PatchContext(left, delta));\n};\n\nDiffPatcher.prototype.reverse = function(delta) {\n  return this.processor.process(new ReverseContext(delta));\n};\n\nDiffPatcher.prototype.unpatch = function(right, delta) {\n  return this.patch(right, this.reverse(delta));\n};\n\nexports.DiffPatcher = DiffPatcher;\n","// use as 2nd parameter for JSON.parse to revive Date instances\nmodule.exports = function dateReviver(key, value) {\n  var parts;\n  if (typeof value === 'string') {\n    parts = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d*))?(Z|([+\\-])(\\d{2}):(\\d{2}))$/.exec(value);\n    if (parts) {\n      return new Date(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4], +parts[5], +parts[6], +(parts[7] || 0)));\n    }\n  }\n  return value;\n};\n","\nvar Processor = function Processor(options){\n\tthis.selfOptions = options;\n\tthis.pipes = {};\n};\n\nProcessor.prototype.options = function(options) {\n\tif (options) {\n\t\tthis.selfOptions = options;\n\t}\n\treturn this.selfOptions;\n};\n\nProcessor.prototype.pipe = function(name, pipe) {\n\tif (typeof name === 'string') {\n\t\tif (typeof pipe === 'undefined') {\n\t\t\treturn this.pipes[name];\n\t\t} else {\n\t\t\tthis.pipes[name] = pipe;\n\t\t}\n\t}\n\tif (name && name.name) {\n\t\tpipe = name;\n\t\tif (pipe.processor === this) { return pipe; }\n\t\tthis.pipes[pipe.name] = pipe;\n\t}\n\tpipe.processor = this;\n\treturn pipe;\n};\n\nProcessor.prototype.process = function(input, pipe) {\n\tvar context = input;\n\tcontext.options = this.options();\n\tvar nextPipe = pipe || input.pipe || 'default';\n\tvar lastPipe, lastContext;\n\twhile (nextPipe) {\n\t\tif (typeof context.nextAfterChildren !== 'undefined') {\n\t\t\t// children processed and coming back to parent\n\t\t\tcontext.next = context.nextAfterChildren;\n\t\t\tcontext.nextAfterChildren = null;\n\t\t}\n\n\t\tif (typeof nextPipe === 'string') {\n\t\t\tnextPipe = this.pipe(nextPipe);\n\t\t}\n\t\tnextPipe.process(context);\n\t\tlastContext = context;\n\t\tlastPipe = nextPipe;\n\t\tnextPipe = null;\n\t\tif (context) {\n\t\t\tif (context.next) {\n\t\t\t\tcontext = context.next;\n\t\t\t\tnextPipe = lastContext.nextPipe || context.pipe || lastPipe;\n\t\t\t}\n\t\t}\n\t}\n\treturn context.hasResult ? context.result : undefined;\n};\n\nexports.Processor = Processor;\n","var Pipe = function Pipe(name) {\n  this.name = name;\n  this.filters = [];\n};\n\nPipe.prototype.process = function(input) {\n  if (!this.processor) {\n    throw new Error('add this pipe to a processor before using it');\n  }\n  var debug = this.debug;\n  var length = this.filters.length;\n  var context = input;\n  for (var index = 0; index < length; index++) {\n    var filter = this.filters[index];\n    if (debug) {\n      this.log('filter: ' + filter.filterName);\n    }\n    filter(context);\n    if (typeof context === 'object' && context.exiting) {\n      context.exiting = false;\n      break;\n    }\n  }\n  if (!context.next && this.resultCheck) {\n    this.resultCheck(context);\n  }\n};\n\nPipe.prototype.log = function(msg) {\n  console.log('[jsondiffpatch] ' + this.name + ' pipe, ' + msg);\n};\n\nPipe.prototype.append = function() {\n  this.filters.push.apply(this.filters, arguments);\n  return this;\n};\n\nPipe.prototype.prepend = function() {\n  this.filters.unshift.apply(this.filters, arguments);\n  return this;\n};\n\nPipe.prototype.indexOf = function(filterName) {\n  if (!filterName) {\n    throw new Error('a filter name is required');\n  }\n  for (var index = 0; index < this.filters.length; index++) {\n    var filter = this.filters[index];\n    if (filter.filterName === filterName) {\n      return index;\n    }\n  }\n  throw new Error('filter not found: ' + filterName);\n};\n\nPipe.prototype.list = function() {\n  var names = [];\n  for (var index = 0; index < this.filters.length; index++) {\n    var filter = this.filters[index];\n    names.push(filter.filterName);\n  }\n  return names;\n};\n\nPipe.prototype.after = function(filterName) {\n  var index = this.indexOf(filterName);\n  var params = Array.prototype.slice.call(arguments, 1);\n  if (!params.length) {\n    throw new Error('a filter is required');\n  }\n  params.unshift(index + 1, 0);\n  Array.prototype.splice.apply(this.filters, params);\n  return this;\n};\n\nPipe.prototype.before = function(filterName) {\n  var index = this.indexOf(filterName);\n  var params = Array.prototype.slice.call(arguments, 1);\n  if (!params.length) {\n    throw new Error('a filter is required');\n  }\n  params.unshift(index, 0);\n  Array.prototype.splice.apply(this.filters, params);\n  return this;\n};\n\nPipe.prototype.clear = function() {\n  this.filters.length = 0;\n  return this;\n};\n\nPipe.prototype.shouldHaveResult = function(should) {\n  if (should === false) {\n    this.resultCheck = null;\n    return;\n  }\n  if (this.resultCheck) {\n    return;\n  }\n  var pipe = this;\n  this.resultCheck = function(context) {\n    if (!context.hasResult) {\n      console.log(context);\n      var error = new Error(pipe.name + ' failed');\n      error.noResult = true;\n      throw error;\n    }\n  };\n  return this;\n};\n\nexports.Pipe = Pipe;\n","var Context = require('./context').Context;\n\nvar DiffContext = function DiffContext(left, right) {\n  this.left = left;\n  this.right = right;\n  this.pipe = 'diff';\n};\n\nDiffContext.prototype = new Context();\n\nexports.DiffContext = DiffContext;\n","var Context = require('./context').Context;\n\nvar PatchContext = function PatchContext(left, delta) {\n  this.left = left;\n  this.delta = delta;\n  this.pipe = 'patch';\n};\n\nPatchContext.prototype = new Context();\n\nexports.PatchContext = PatchContext;\n","var Context = require('./context').Context;\n\nvar ReverseContext = function ReverseContext(delta) {\n  this.delta = delta;\n  this.pipe = 'reverse';\n};\n\nReverseContext.prototype = new Context();\n\nexports.ReverseContext = ReverseContext;\n","var isArray = (typeof Array.isArray === 'function') ?\n  // use native function\n  Array.isArray :\n  // use instanceof operator\n  function(a) {\n    return a instanceof Array;\n  };\n\nvar diffFilter = function trivialMatchesDiffFilter(context) {\n  if (context.left === context.right) {\n    context.setResult(undefined).exit();\n    return;\n  }\n  if (typeof context.left === 'undefined') {\n    if (typeof context.right === 'function') {\n      throw new Error('functions are not supported');\n    }\n    context.setResult([context.right]).exit();\n    return;\n  }\n  if (typeof context.right === 'undefined') {\n    context.setResult([context.left, 0, 0]).exit();\n    return;\n  }\n  if (typeof context.left === 'function' || typeof context.right === 'function') {\n    throw new Error('functions are not supported');\n  }\n  context.leftType = context.left === null ? 'null' : typeof context.left;\n  context.rightType = context.right === null ? 'null' : typeof context.right;\n  if (context.leftType !== context.rightType) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  if (context.leftType === 'boolean' || context.leftType === 'number') {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  if (context.leftType === 'object') {\n    context.leftIsArray = isArray(context.left);\n  }\n  if (context.rightType === 'object') {\n    context.rightIsArray = isArray(context.right);\n  }\n  if (context.leftIsArray !== context.rightIsArray) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n};\ndiffFilter.filterName = 'trivial';\n\nvar patchFilter = function trivialMatchesPatchFilter(context) {\n  if (typeof context.delta === 'undefined') {\n    context.setResult(context.left).exit();\n    return;\n  }\n  context.nested = !isArray(context.delta);\n  if (context.nested) {\n    return;\n  }\n  if (context.delta.length === 1) {\n    context.setResult(context.delta[0]).exit();\n    return;\n  }\n  if (context.delta.length === 2) {\n    context.setResult(context.delta[1]).exit();\n    return;\n  }\n  if (context.delta.length === 3 && context.delta[2] === 0) {\n    context.setResult(undefined).exit();\n    return;\n  }\n};\npatchFilter.filterName = 'trivial';\n\nvar reverseFilter = function trivialReferseFilter(context) {\n  if (typeof context.delta === 'undefined') {\n    context.setResult(context.delta).exit();\n    return;\n  }\n  context.nested = !isArray(context.delta);\n  if (context.nested) {\n    return;\n  }\n  if (context.delta.length === 1) {\n    context.setResult([context.delta[0], 0, 0]).exit();\n    return;\n  }\n  if (context.delta.length === 2) {\n    context.setResult([context.delta[1], context.delta[0]]).exit();\n    return;\n  }\n  if (context.delta.length === 3 && context.delta[2] === 0) {\n    context.setResult([context.delta[0]]).exit();\n    return;\n  }\n};\nreverseFilter.filterName = 'trivial';\n\nexports.diffFilter = diffFilter;\nexports.patchFilter = patchFilter;\nexports.reverseFilter = reverseFilter;\n","var DiffContext = require('../contexts/diff').DiffContext;\nvar PatchContext = require('../contexts/patch').PatchContext;\nvar ReverseContext = require('../contexts/reverse').ReverseContext;\n\nvar collectChildrenDiffFilter = function collectChildrenDiffFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  var length = context.children.length;\n  var child;\n  var result = context.result;\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    if (typeof child.result === 'undefined') {\n      continue;\n    }\n    result = result || {};\n    result[child.childName] = child.result;\n  }\n  if (result && context.leftIsArray) {\n    result._t = 'a';\n  }\n  context.setResult(result).exit();\n};\ncollectChildrenDiffFilter.filterName = 'collectChildren';\n\nvar objectsDiffFilter = function objectsDiffFilter(context) {\n  if (context.leftIsArray || context.leftType !== 'object') {\n    return;\n  }\n\n  var name, child;\n  for (name in context.left) {\n    child = new DiffContext(context.left[name], context.right[name]);\n    context.push(child, name);\n  }\n  for (name in context.right) {\n    if (typeof context.left[name] === 'undefined') {\n      child = new DiffContext(undefined, context.right[name]);\n      context.push(child, name);\n    }\n  }\n\n  if (!context.children || context.children.length === 0) {\n    context.setResult(undefined).exit();\n    return;\n  }\n  context.exit();\n};\nobjectsDiffFilter.filterName = 'objects';\n\nvar patchFilter = function nestedPatchFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var name, child;\n  for (name in context.delta) {\n    child = new PatchContext(context.left[name], context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\npatchFilter.filterName = 'objects';\n\nvar collectChildrenPatchFilter = function collectChildrenPatchFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var length = context.children.length;\n  var child;\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    if (context.left.hasOwnProperty(child.childName) && child.result === undefined) {\n      delete context.left[child.childName];\n    } else if (context.left[child.childName] !== child.result) {\n      context.left[child.childName] = child.result;\n    }\n  }\n  context.setResult(context.left).exit();\n};\ncollectChildrenPatchFilter.filterName = 'collectChildren';\n\nvar reverseFilter = function nestedReverseFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var name, child;\n  for (name in context.delta) {\n    child = new ReverseContext(context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\nreverseFilter.filterName = 'objects';\n\nvar collectChildrenReverseFilter = function collectChildrenReverseFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  var length = context.children.length;\n  var child;\n  var delta = {};\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    if (delta[child.childName] !== child.result) {\n      delta[child.childName] = child.result;\n    }\n  }\n  context.setResult(delta).exit();\n};\ncollectChildrenReverseFilter.filterName = 'collectChildren';\n\nexports.collectChildrenDiffFilter = collectChildrenDiffFilter;\nexports.objectsDiffFilter = objectsDiffFilter;\nexports.patchFilter = patchFilter;\nexports.collectChildrenPatchFilter = collectChildrenPatchFilter;\nexports.reverseFilter = reverseFilter;\nexports.collectChildrenReverseFilter = collectChildrenReverseFilter;\n","var DiffContext = require('../contexts/diff').DiffContext;\nvar PatchContext = require('../contexts/patch').PatchContext;\nvar ReverseContext = require('../contexts/reverse').ReverseContext;\n\nvar lcs = require('./lcs');\n\nvar ARRAY_MOVE = 3;\n\nvar isArray = (typeof Array.isArray === 'function') ?\n  // use native function\n  Array.isArray :\n  // use instanceof operator\n  function(a) {\n    return a instanceof Array;\n  };\n\nvar arrayIndexOf = typeof Array.prototype.indexOf === 'function' ?\n  function(array, item) {\n    return array.indexOf(item);\n  } : function(array, item) {\n    var length = array.length;\n    for (var i = 0; i < length; i++) {\n      if (array[i] === item) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\nfunction arraysHaveMatchByRef(array1, array2, len1, len2) {\n  for (var index1 = 0; index1 < len1; index1++) {\n    var val1 = array1[index1];\n    for (var index2 = 0; index2 < len2; index2++) {\n      var val2 = array2[index2];\n      if (val1 === val2) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction matchItems(array1, array2, index1, index2, context) {\n  var value1 = array1[index1];\n  var value2 = array2[index2];\n  if (value1 === value2) {\n    return true;\n  }\n  if (typeof value1 !== 'object' || typeof value2 !== 'object') {\n    return false;\n  }\n  var objectHash = context.objectHash;\n  if (!objectHash) {\n    // no way to match objects was provided, try match by position\n    return context.matchByPosition && index1 === index2;\n  }\n  var hash1;\n  var hash2;\n  if (typeof index1 === 'number') {\n    context.hashCache1 = context.hashCache1 || [];\n    hash1 = context.hashCache1[index1];\n    if (typeof hash1 === 'undefined') {\n      context.hashCache1[index1] = hash1 = objectHash(value1, index1);\n    }\n  } else {\n    hash1 = objectHash(value1);\n  }\n  if (typeof hash1 === 'undefined') {\n    return false;\n  }\n  if (typeof index2 === 'number') {\n    context.hashCache2 = context.hashCache2 || [];\n    hash2 = context.hashCache2[index2];\n    if (typeof hash2 === 'undefined') {\n      context.hashCache2[index2] = hash2 = objectHash(value2, index2);\n    }\n  } else {\n    hash2 = objectHash(value2);\n  }\n  if (typeof hash2 === 'undefined') {\n    return false;\n  }\n  return hash1 === hash2;\n}\n\nvar diffFilter = function arraysDiffFilter(context) {\n  if (!context.leftIsArray) {\n    return;\n  }\n\n  var matchContext = {\n    objectHash: context.options && context.options.objectHash,\n    matchByPosition: context.options && context.options.matchByPosition\n  };\n  var commonHead = 0;\n  var commonTail = 0;\n  var index;\n  var index1;\n  var index2;\n  var array1 = context.left;\n  var array2 = context.right;\n  var len1 = array1.length;\n  var len2 = array2.length;\n\n  var child;\n\n  if (len1 > 0 && len2 > 0 && !matchContext.objectHash &&\n    typeof matchContext.matchByPosition !== 'boolean') {\n    matchContext.matchByPosition = !arraysHaveMatchByRef(array1, array2, len1, len2);\n  }\n\n  // separate common head\n  while (commonHead < len1 && commonHead < len2 &&\n    matchItems(array1, array2, commonHead, commonHead, matchContext)) {\n    index = commonHead;\n    child = new DiffContext(context.left[index], context.right[index]);\n    context.push(child, index);\n    commonHead++;\n  }\n  // separate common tail\n  while (commonTail + commonHead < len1 && commonTail + commonHead < len2 &&\n    matchItems(array1, array2, len1 - 1 - commonTail, len2 - 1 - commonTail, matchContext)) {\n    index1 = len1 - 1 - commonTail;\n    index2 = len2 - 1 - commonTail;\n    child = new DiffContext(context.left[index1], context.right[index2]);\n    context.push(child, index2);\n    commonTail++;\n  }\n  var result;\n  if (commonHead + commonTail === len1) {\n    if (len1 === len2) {\n      // arrays are identical\n      context.setResult(undefined).exit();\n      return;\n    }\n    // trivial case, a block (1 or more consecutive items) was added\n    result = result || {\n      _t: 'a'\n    };\n    for (index = commonHead; index < len2 - commonTail; index++) {\n      result[index] = [array2[index]];\n    }\n    context.setResult(result).exit();\n    return;\n  }\n  if (commonHead + commonTail === len2) {\n    // trivial case, a block (1 or more consecutive items) was removed\n    result = result || {\n      _t: 'a'\n    };\n    for (index = commonHead; index < len1 - commonTail; index++) {\n      result['_' + index] = [array1[index], 0, 0];\n    }\n    context.setResult(result).exit();\n    return;\n  }\n  // reset hash cache\n  delete matchContext.hashCache1;\n  delete matchContext.hashCache2;\n\n  // diff is not trivial, find the LCS (Longest Common Subsequence)\n  var trimmed1 = array1.slice(commonHead, len1 - commonTail);\n  var trimmed2 = array2.slice(commonHead, len2 - commonTail);\n  var seq = lcs.get(\n    trimmed1, trimmed2,\n    matchItems,\n    matchContext\n  );\n  var removedItems = [];\n  result = result || {\n    _t: 'a'\n  };\n  for (index = commonHead; index < len1 - commonTail; index++) {\n    if (arrayIndexOf(seq.indices1, index - commonHead) < 0) {\n      // removed\n      result['_' + index] = [array1[index], 0, 0];\n      removedItems.push(index);\n    }\n  }\n\n  var detectMove = true;\n  if (context.options && context.options.arrays && context.options.arrays.detectMove === false) {\n    detectMove = false;\n  }\n  var includeValueOnMove = false;\n  if (context.options && context.options.arrays && context.options.arrays.includeValueOnMove) {\n    includeValueOnMove = true;\n  }\n\n  var removedItemsLength = removedItems.length;\n  for (index = commonHead; index < len2 - commonTail; index++) {\n    var indexOnArray2 = arrayIndexOf(seq.indices2, index - commonHead);\n    if (indexOnArray2 < 0) {\n      // added, try to match with a removed item and register as position move\n      var isMove = false;\n      if (detectMove && removedItemsLength > 0) {\n        for (var removeItemIndex1 = 0; removeItemIndex1 < removedItemsLength; removeItemIndex1++) {\n          index1 = removedItems[removeItemIndex1];\n          if (matchItems(trimmed1, trimmed2, index1 - commonHead,\n            index - commonHead, matchContext)) {\n            // store position move as: [originalValue, newPosition, ARRAY_MOVE]\n            result['_' + index1].splice(1, 2, index, ARRAY_MOVE);\n            if (!includeValueOnMove) {\n              // don't include moved value on diff, to save bytes\n              result['_' + index1][0] = '';\n            }\n\n            index2 = index;\n            child = new DiffContext(context.left[index1], context.right[index2]);\n            context.push(child, index2);\n            removedItems.splice(removeItemIndex1, 1);\n            isMove = true;\n            break;\n          }\n        }\n      }\n      if (!isMove) {\n        // added\n        result[index] = [array2[index]];\n      }\n    } else {\n      // match, do inner diff\n      index1 = seq.indices1[indexOnArray2] + commonHead;\n      index2 = seq.indices2[indexOnArray2] + commonHead;\n      child = new DiffContext(context.left[index1], context.right[index2]);\n      context.push(child, index2);\n    }\n  }\n\n  context.setResult(result).exit();\n\n};\ndiffFilter.filterName = 'arrays';\n\nvar compare = {\n  numerically: function(a, b) {\n    return a - b;\n  },\n  numericallyBy: function(name) {\n    return function(a, b) {\n      return a[name] - b[name];\n    };\n  }\n};\n\nvar patchFilter = function nestedPatchFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var index, index1;\n\n  var delta = context.delta;\n  var array = context.left;\n\n  // first, separate removals, insertions and modifications\n  var toRemove = [];\n  var toInsert = [];\n  var toModify = [];\n  for (index in delta) {\n    if (index !== '_t') {\n      if (index[0] === '_') {\n        // removed item from original array\n        if (delta[index][2] === 0 || delta[index][2] === ARRAY_MOVE) {\n          toRemove.push(parseInt(index.slice(1), 10));\n        } else {\n          throw new Error('only removal or move can be applied at original array indices' +\n            ', invalid diff type: ' + delta[index][2]);\n        }\n      } else {\n        if (delta[index].length === 1) {\n          // added item at new array\n          toInsert.push({\n            index: parseInt(index, 10),\n            value: delta[index][0]\n          });\n        } else {\n          // modified item at new array\n          toModify.push({\n            index: parseInt(index, 10),\n            delta: delta[index]\n          });\n        }\n      }\n    }\n  }\n\n  // remove items, in reverse order to avoid sawing our own floor\n  toRemove = toRemove.sort(compare.numerically);\n  for (index = toRemove.length - 1; index >= 0; index--) {\n    index1 = toRemove[index];\n    var indexDiff = delta['_' + index1];\n    var removedValue = array.splice(index1, 1)[0];\n    if (indexDiff[2] === ARRAY_MOVE) {\n      // reinsert later\n      toInsert.push({\n        index: indexDiff[1],\n        value: removedValue\n      });\n    }\n  }\n\n  // insert items, in reverse order to avoid moving our own floor\n  toInsert = toInsert.sort(compare.numericallyBy('index'));\n  var toInsertLength = toInsert.length;\n  for (index = 0; index < toInsertLength; index++) {\n    var insertion = toInsert[index];\n    array.splice(insertion.index, 0, insertion.value);\n  }\n\n  // apply modifications\n  var toModifyLength = toModify.length;\n  var child;\n  if (toModifyLength > 0) {\n    for (index = 0; index < toModifyLength; index++) {\n      var modification = toModify[index];\n      child = new PatchContext(context.left[modification.index], modification.delta);\n      context.push(child, modification.index);\n    }\n  }\n\n  if (!context.children) {\n    context.setResult(context.left).exit();\n    return;\n  }\n  context.exit();\n};\npatchFilter.filterName = 'arrays';\n\nvar collectChildrenPatchFilter = function collectChildrenPatchFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var length = context.children.length;\n  var child;\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    context.left[child.childName] = child.result;\n  }\n  context.setResult(context.left).exit();\n};\ncollectChildrenPatchFilter.filterName = 'arraysCollectChildren';\n\nvar reverseFilter = function arraysReverseFilter(context) {\n  if (!context.nested) {\n    if (context.delta[2] === ARRAY_MOVE) {\n      context.newName = '_' + context.delta[1];\n      context.setResult([context.delta[0], parseInt(context.childName.substr(1), 10), ARRAY_MOVE]).exit();\n    }\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var name, child;\n  for (name in context.delta) {\n    if (name === '_t') {\n      continue;\n    }\n    child = new ReverseContext(context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\nreverseFilter.filterName = 'arrays';\n\nvar reverseArrayDeltaIndex = function(delta, index, itemDelta) {\n  if (typeof index === 'string' && index[0] === '_') {\n    return parseInt(index.substr(1), 10);\n  } else if (isArray(itemDelta) && itemDelta[2] === 0) {\n    return '_' + index;\n  }\n\n  var reverseIndex = +index;\n  for (var deltaIndex in delta) {\n    var deltaItem = delta[deltaIndex];\n    if (isArray(deltaItem)) {\n      if (deltaItem[2] === ARRAY_MOVE) {\n        var moveFromIndex = parseInt(deltaIndex.substr(1), 10);\n        var moveToIndex = deltaItem[1];\n        if (moveToIndex === +index) {\n          return moveFromIndex;\n        }\n        if (moveFromIndex <= reverseIndex && moveToIndex > reverseIndex) {\n          reverseIndex++;\n        } else if (moveFromIndex >= reverseIndex && moveToIndex < reverseIndex) {\n          reverseIndex--;\n        }\n      } else if (deltaItem[2] === 0) {\n        var deleteIndex = parseInt(deltaIndex.substr(1), 10);\n        if (deleteIndex <= reverseIndex) {\n          reverseIndex++;\n        }\n      } else if (deltaItem.length === 1 && deltaIndex <= reverseIndex) {\n        reverseIndex--;\n      }\n    }\n  }\n\n  return reverseIndex;\n};\n\nvar collectChildrenReverseFilter = function collectChildrenReverseFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  var length = context.children.length;\n  var child;\n  var delta = {\n    _t: 'a'\n  };\n\n  for (var index = 0; index < length; index++) {\n    child = context.children[index];\n    var name = child.newName;\n    if (typeof name === 'undefined') {\n      name = reverseArrayDeltaIndex(context.delta, child.childName, child.result);\n    }\n    if (delta[name] !== child.result) {\n      delta[name] = child.result;\n    }\n  }\n  context.setResult(delta).exit();\n};\ncollectChildrenReverseFilter.filterName = 'arraysCollectChildren';\n\nexports.diffFilter = diffFilter;\nexports.patchFilter = patchFilter;\nexports.collectChildrenPatchFilter = collectChildrenPatchFilter;\nexports.reverseFilter = reverseFilter;\nexports.collectChildrenReverseFilter = collectChildrenReverseFilter;\n","var diffFilter = function datesDiffFilter(context) {\n  if (context.left instanceof Date) {\n    if (context.right instanceof Date) {\n      if (context.left.getTime() !== context.right.getTime()) {\n        context.setResult([context.left, context.right]);\n      } else {\n        context.setResult(undefined);\n      }\n    } else {\n      context.setResult([context.left, context.right]);\n    }\n    context.exit();\n  } else if (context.right instanceof Date) {\n    context.setResult([context.left, context.right]).exit();\n  }\n};\ndiffFilter.filterName = 'dates';\n\nexports.diffFilter = diffFilter;\n","/* global diff_match_patch */\nvar TEXT_DIFF = 2;\nvar DEFAULT_MIN_LENGTH = 60;\nvar cachedDiffPatch = null;\n\nvar getDiffMatchPatch = function() {\n  /*jshint camelcase: false */\n\n  if (!cachedDiffPatch) {\n    var instance;\n    if (typeof diff_match_patch !== 'undefined') {\n      // already loaded, probably a browser\n      instance = typeof diff_match_patch === 'function' ?\n        new diff_match_patch() : new diff_match_patch.diff_match_patch();\n    } else if (typeof require === 'function') {\n      try {\n        var dmp = require('diff-match-patch');\n        instance = new dmp.diff_match_patch();\n      } catch (err) {\n        try {\n          var dmpModuleName = 'diff_match_patch_uncompressed';\n          var dmp = require('../../public/external/' + dmpModuleName);\n          instance = new dmp.diff_match_patch();\n        } catch (err) {\n          instance = null;\n        }\n      }\n    }\n    if (!instance) {\n      var error = new Error('text diff_match_patch library not found');\n      error.diff_match_patch_not_found = true;\n      throw error;\n    }\n    cachedDiffPatch = {\n      diff: function(txt1, txt2) {\n        return instance.patch_toText(instance.patch_make(txt1, txt2));\n      },\n      patch: function(txt1, patch) {\n        var results = instance.patch_apply(instance.patch_fromText(patch), txt1);\n        for (var i = 0; i < results[1].length; i++) {\n          if (!results[1][i]) {\n            var error = new Error('text patch failed');\n            error.textPatchFailed = true;\n          }\n        }\n        return results[0];\n      }\n    };\n  }\n  return cachedDiffPatch;\n};\n\nvar diffFilter = function textsDiffFilter(context) {\n  if (context.leftType !== 'string') {\n    return;\n  }\n  var minLength = (context.options && context.options.textDiff &&\n    context.options.textDiff.minLength) || DEFAULT_MIN_LENGTH;\n  if (context.left.length < minLength ||\n    context.right.length < minLength) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  // large text, use a text-diff algorithm\n  var diff = getDiffMatchPatch().diff;\n  context.setResult([diff(context.left, context.right), 0, TEXT_DIFF]).exit();\n};\ndiffFilter.filterName = 'texts';\n\nvar patchFilter = function textsPatchFilter(context) {\n  if (context.nested) {\n    return;\n  }\n  if (context.delta[2] !== TEXT_DIFF) {\n    return;\n  }\n\n  // text-diff, use a text-patch algorithm\n  var patch = getDiffMatchPatch().patch;\n  context.setResult(patch(context.left, context.delta[0])).exit();\n};\npatchFilter.filterName = 'texts';\n\nvar textDeltaReverse = function(delta) {\n  var i, l, lines, line, lineTmp, header = null,\n    headerRegex = /^@@ +\\-(\\d+),(\\d+) +\\+(\\d+),(\\d+) +@@$/,\n    lineHeader, lineAdd, lineRemove;\n  lines = delta.split('\\n');\n  for (i = 0, l = lines.length; i < l; i++) {\n    line = lines[i];\n    var lineStart = line.slice(0, 1);\n    if (lineStart === '@') {\n      header = headerRegex.exec(line);\n      lineHeader = i;\n      lineAdd = null;\n      lineRemove = null;\n\n      // fix header\n      lines[lineHeader] = '@@ -' + header[3] + ',' + header[4] + ' +' + header[1] + ',' + header[2] + ' @@';\n    } else if (lineStart === '+') {\n      lineAdd = i;\n      lines[i] = '-' + lines[i].slice(1);\n      if (lines[i - 1].slice(0, 1) === '+') {\n        // swap lines to keep default order (-+)\n        lineTmp = lines[i];\n        lines[i] = lines[i - 1];\n        lines[i - 1] = lineTmp;\n      }\n    } else if (lineStart === '-') {\n      lineRemove = i;\n      lines[i] = '+' + lines[i].slice(1);\n    }\n  }\n  return lines.join('\\n');\n};\n\nvar reverseFilter = function textsReverseFilter(context) {\n  if (context.nested) {\n    return;\n  }\n  if (context.delta[2] !== TEXT_DIFF) {\n    return;\n  }\n\n  // text-diff, use a text-diff algorithm\n  context.setResult([textDeltaReverse(context.delta[0]), 0, TEXT_DIFF]).exit();\n};\nreverseFilter.filterName = 'texts';\n\nexports.diffFilter = diffFilter;\nexports.patchFilter = patchFilter;\nexports.reverseFilter = reverseFilter;\n","\nvar Pipe = require('../pipe').Pipe;\n\nvar Context = function Context(){\n};\n\nContext.prototype.setResult = function(result) {\n\tthis.result = result;\n\tthis.hasResult = true;\n\treturn this;\n};\n\nContext.prototype.exit = function() {\n\tthis.exiting = true;\n\treturn this;\n};\n\nContext.prototype.switchTo = function(next, pipe) {\n\tif (typeof next === 'string' || next instanceof Pipe) {\n\t\tthis.nextPipe = next;\n\t} else {\n\t\tthis.next = next;\n\t\tif (pipe) {\n\t\t\tthis.nextPipe = pipe;\n\t\t}\n\t}\n\treturn this;\n};\n\nContext.prototype.push = function(child, name) {\n\tchild.parent = this;\n\tif (typeof name !== 'undefined') {\n\t\tchild.childName = name;\n\t}\n\tchild.root = this.root || this;\n\tchild.options = child.options || this.options;\n\tif (!this.children) {\n\t\tthis.children = [child];\n\t\tthis.nextAfterChildren = this.next || null;\n\t\tthis.next = child;\n\t} else {\n\t\tthis.children[this.children.length - 1].next = child;\n\t\tthis.children.push(child);\n\t}\n\tchild.next = this;\n\treturn this;\n};\n\nexports.Context = Context;\n","/*\n\nLCS implementation that supports arrays or strings\n\nreference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n\n*/\n\nvar defaultMatch = function(array1, array2, index1, index2) {\n  return array1[index1] === array2[index2];\n};\n\nvar lengthMatrix = function(array1, array2, match, context) {\n  var len1 = array1.length;\n  var len2 = array2.length;\n  var x, y;\n\n  // initialize empty matrix of len1+1 x len2+1\n  var matrix = [len1 + 1];\n  for (x = 0; x < len1 + 1; x++) {\n    matrix[x] = [len2 + 1];\n    for (y = 0; y < len2 + 1; y++) {\n      matrix[x][y] = 0;\n    }\n  }\n  matrix.match = match;\n  // save sequence lengths for each coordinate\n  for (x = 1; x < len1 + 1; x++) {\n    for (y = 1; y < len2 + 1; y++) {\n      if (match(array1, array2, x - 1, y - 1, context)) {\n        matrix[x][y] = matrix[x - 1][y - 1] + 1;\n      } else {\n        matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1]);\n      }\n    }\n  }\n  return matrix;\n};\n\nvar backtrack = function(matrix, array1, array2, index1, index2, context) {\n  if (index1 === 0 || index2 === 0) {\n    return {\n      sequence: [],\n      indices1: [],\n      indices2: []\n    };\n  }\n\n  if (matrix.match(array1, array2, index1 - 1, index2 - 1, context)) {\n    var subsequence = backtrack(matrix, array1, array2, index1 - 1, index2 - 1, context);\n    subsequence.sequence.push(array1[index1 - 1]);\n    subsequence.indices1.push(index1 - 1);\n    subsequence.indices2.push(index2 - 1);\n    return subsequence;\n  }\n\n  if (matrix[index1][index2 - 1] > matrix[index1 - 1][index2]) {\n    return backtrack(matrix, array1, array2, index1, index2 - 1, context);\n  } else {\n    return backtrack(matrix, array1, array2, index1 - 1, index2, context);\n  }\n};\n\nvar get = function(array1, array2, match, context) {\n  context = context || {};\n  var matrix = lengthMatrix(array1, array2, match || defaultMatch, context);\n  var result = backtrack(matrix, array1, array2, array1.length, array2.length, context);\n  if (typeof array1 === 'string' && typeof array2 === 'string') {\n    result.sequence = result.sequence.join('');\n  }\n  return result;\n};\n\nexports.get = get;\n","'use strict'\r\n\r\n/**\r\n * Diff Match and Patch\r\n *\r\n * Copyright 2006 Google Inc.\r\n * http://code.google.com/p/google-diff-match-patch/\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Computes the difference between two texts to create a patch.\r\n * Applies the patch onto another text, allowing for errors.\r\n * @author fraser@google.com (Neil Fraser)\r\n */\r\n\r\n/**\r\n * Class containing the diff, match and patch methods.\r\n * @constructor\r\n */\r\nfunction diff_match_patch() {\r\n\r\n  // Defaults.\r\n  // Redefine these in your program to override the defaults.\r\n\r\n  // Number of seconds to map a diff before giving up (0 for infinity).\r\n  this.Diff_Timeout = 1.0;\r\n  // Cost of an empty edit operation in terms of edit characters.\r\n  this.Diff_EditCost = 4;\r\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\r\n  this.Match_Threshold = 0.5;\r\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\r\n  // A match this many characters away from the expected location will add\r\n  // 1.0 to the score (0.0 is a perfect match).\r\n  this.Match_Distance = 1000;\r\n  // When deleting a large block of text (over ~64 characters), how close do\r\n  // the contents have to be to match the expected contents. (0.0 = perfection,\r\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\r\n  // end points of a delete need to match.\r\n  this.Patch_DeleteThreshold = 0.5;\r\n  // Chunk size for context length.\r\n  this.Patch_Margin = 4;\r\n\r\n  // The number of bits in an int.\r\n  this.Match_MaxBits = 32;\r\n}\r\n\r\n\r\n//  DIFF FUNCTIONS\r\n\r\n\r\n/**\r\n * The data structure representing a diff is an array of tuples:\r\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\r\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\r\n */\r\nvar DIFF_DELETE = -1;\r\nvar DIFF_INSERT = 1;\r\nvar DIFF_EQUAL = 0;\r\n\r\n/** @typedef {{0: number, 1: string}} */\r\ndiff_match_patch.Diff;\r\n\r\n\r\n/**\r\n * Find the differences between two texts.  Simplifies the problem by stripping\r\n * any common prefix or suffix off the texts before diffing.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\r\n *     then don't run a line-level diff first to identify the changed areas.\r\n *     Defaults to true, which does a faster, slightly less optimal diff.\r\n * @param {number} opt_deadline Optional time when the diff should be complete\r\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\r\n *     instead.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n */\r\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\r\n    opt_deadline) {\r\n  // Set a deadline by which time the diff must be complete.\r\n  if (typeof opt_deadline == 'undefined') {\r\n    if (this.Diff_Timeout <= 0) {\r\n      opt_deadline = Number.MAX_VALUE;\r\n    } else {\r\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\r\n    }\r\n  }\r\n  var deadline = opt_deadline;\r\n\r\n  // Check for null inputs.\r\n  if (text1 == null || text2 == null) {\r\n    throw new Error('Null input. (diff_main)');\r\n  }\r\n\r\n  // Check for equality (speedup).\r\n  if (text1 == text2) {\r\n    if (text1) {\r\n      return [[DIFF_EQUAL, text1]];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  if (typeof opt_checklines == 'undefined') {\r\n    opt_checklines = true;\r\n  }\r\n  var checklines = opt_checklines;\r\n\r\n  // Trim off common prefix (speedup).\r\n  var commonlength = this.diff_commonPrefix(text1, text2);\r\n  var commonprefix = text1.substring(0, commonlength);\r\n  text1 = text1.substring(commonlength);\r\n  text2 = text2.substring(commonlength);\r\n\r\n  // Trim off common suffix (speedup).\r\n  commonlength = this.diff_commonSuffix(text1, text2);\r\n  var commonsuffix = text1.substring(text1.length - commonlength);\r\n  text1 = text1.substring(0, text1.length - commonlength);\r\n  text2 = text2.substring(0, text2.length - commonlength);\r\n\r\n  // Compute the diff on the middle block.\r\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\r\n\r\n  // Restore the prefix and suffix.\r\n  if (commonprefix) {\r\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\r\n  }\r\n  if (commonsuffix) {\r\n    diffs.push([DIFF_EQUAL, commonsuffix]);\r\n  }\r\n  this.diff_cleanupMerge(diffs);\r\n  return diffs;\r\n};\r\n\r\n\r\n/**\r\n * Find the differences between two texts.  Assumes that the texts do not\r\n * have any common prefix or suffix.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\r\n *     line-level diff first to identify the changed areas.\r\n *     If true, then run a faster, slightly less optimal diff.\r\n * @param {number} deadline Time when the diff should be complete by.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\r\n    deadline) {\r\n  var diffs;\r\n\r\n  if (!text1) {\r\n    // Just add some text (speedup).\r\n    return [[DIFF_INSERT, text2]];\r\n  }\r\n\r\n  if (!text2) {\r\n    // Just delete some text (speedup).\r\n    return [[DIFF_DELETE, text1]];\r\n  }\r\n\r\n  var longtext = text1.length > text2.length ? text1 : text2;\r\n  var shorttext = text1.length > text2.length ? text2 : text1;\r\n  var i = longtext.indexOf(shorttext);\r\n  if (i != -1) {\r\n    // Shorter text is inside the longer text (speedup).\r\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\r\n             [DIFF_EQUAL, shorttext],\r\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\r\n    // Swap insertions for deletions if diff is reversed.\r\n    if (text1.length > text2.length) {\r\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\r\n    }\r\n    return diffs;\r\n  }\r\n\r\n  if (shorttext.length == 1) {\r\n    // Single character string.\r\n    // After the previous speedup, the character can't be an equality.\r\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\r\n  }\r\n\r\n  // Check to see if the problem can be split in two.\r\n  var hm = this.diff_halfMatch_(text1, text2);\r\n  if (hm) {\r\n    // A half-match was found, sort out the return data.\r\n    var text1_a = hm[0];\r\n    var text1_b = hm[1];\r\n    var text2_a = hm[2];\r\n    var text2_b = hm[3];\r\n    var mid_common = hm[4];\r\n    // Send both pairs off for separate processing.\r\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\r\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\r\n    // Merge the results.\r\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\r\n  }\r\n\r\n  if (checklines && text1.length > 100 && text2.length > 100) {\r\n    return this.diff_lineMode_(text1, text2, deadline);\r\n  }\r\n\r\n  return this.diff_bisect_(text1, text2, deadline);\r\n};\r\n\r\n\r\n/**\r\n * Do a quick line-level diff on both strings, then rediff the parts for\r\n * greater accuracy.\r\n * This speedup can produce non-minimal diffs.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {number} deadline Time when the diff should be complete by.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\r\n  // Scan the text on a line-by-line basis first.\r\n  var a = this.diff_linesToChars_(text1, text2);\r\n  text1 = a.chars1;\r\n  text2 = a.chars2;\r\n  var linearray = a.lineArray;\r\n\r\n  var diffs = this.diff_main(text1, text2, false, deadline);\r\n\r\n  // Convert the diff back to original text.\r\n  this.diff_charsToLines_(diffs, linearray);\r\n  // Eliminate freak matches (e.g. blank lines)\r\n  this.diff_cleanupSemantic(diffs);\r\n\r\n  // Rediff any replacement blocks, this time character-by-character.\r\n  // Add a dummy entry at the end.\r\n  diffs.push([DIFF_EQUAL, '']);\r\n  var pointer = 0;\r\n  var count_delete = 0;\r\n  var count_insert = 0;\r\n  var text_delete = '';\r\n  var text_insert = '';\r\n  while (pointer < diffs.length) {\r\n    switch (diffs[pointer][0]) {\r\n      case DIFF_INSERT:\r\n        count_insert++;\r\n        text_insert += diffs[pointer][1];\r\n        break;\r\n      case DIFF_DELETE:\r\n        count_delete++;\r\n        text_delete += diffs[pointer][1];\r\n        break;\r\n      case DIFF_EQUAL:\r\n        // Upon reaching an equality, check for prior redundancies.\r\n        if (count_delete >= 1 && count_insert >= 1) {\r\n          // Delete the offending records and add the merged ones.\r\n          diffs.splice(pointer - count_delete - count_insert,\r\n                       count_delete + count_insert);\r\n          pointer = pointer - count_delete - count_insert;\r\n          var a = this.diff_main(text_delete, text_insert, false, deadline);\r\n          for (var j = a.length - 1; j >= 0; j--) {\r\n            diffs.splice(pointer, 0, a[j]);\r\n          }\r\n          pointer = pointer + a.length;\r\n        }\r\n        count_insert = 0;\r\n        count_delete = 0;\r\n        text_delete = '';\r\n        text_insert = '';\r\n        break;\r\n    }\r\n    pointer++;\r\n  }\r\n  diffs.pop();  // Remove the dummy entry at the end.\r\n\r\n  return diffs;\r\n};\r\n\r\n\r\n/**\r\n * Find the 'middle snake' of a diff, split the problem in two\r\n * and return the recursively constructed diff.\r\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {number} deadline Time at which to bail if not yet complete.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\r\n  // Cache the text lengths to prevent multiple calls.\r\n  var text1_length = text1.length;\r\n  var text2_length = text2.length;\r\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\r\n  var v_offset = max_d;\r\n  var v_length = 2 * max_d;\r\n  var v1 = new Array(v_length);\r\n  var v2 = new Array(v_length);\r\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\r\n  // integers and undefined.\r\n  for (var x = 0; x < v_length; x++) {\r\n    v1[x] = -1;\r\n    v2[x] = -1;\r\n  }\r\n  v1[v_offset + 1] = 0;\r\n  v2[v_offset + 1] = 0;\r\n  var delta = text1_length - text2_length;\r\n  // If the total number of characters is odd, then the front path will collide\r\n  // with the reverse path.\r\n  var front = (delta % 2 != 0);\r\n  // Offsets for start and end of k loop.\r\n  // Prevents mapping of space beyond the grid.\r\n  var k1start = 0;\r\n  var k1end = 0;\r\n  var k2start = 0;\r\n  var k2end = 0;\r\n  for (var d = 0; d < max_d; d++) {\r\n    // Bail out if deadline is reached.\r\n    if ((new Date()).getTime() > deadline) {\r\n      break;\r\n    }\r\n\r\n    // Walk the front path one step.\r\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\r\n      var k1_offset = v_offset + k1;\r\n      var x1;\r\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\r\n        x1 = v1[k1_offset + 1];\r\n      } else {\r\n        x1 = v1[k1_offset - 1] + 1;\r\n      }\r\n      var y1 = x1 - k1;\r\n      while (x1 < text1_length && y1 < text2_length &&\r\n             text1.charAt(x1) == text2.charAt(y1)) {\r\n        x1++;\r\n        y1++;\r\n      }\r\n      v1[k1_offset] = x1;\r\n      if (x1 > text1_length) {\r\n        // Ran off the right of the graph.\r\n        k1end += 2;\r\n      } else if (y1 > text2_length) {\r\n        // Ran off the bottom of the graph.\r\n        k1start += 2;\r\n      } else if (front) {\r\n        var k2_offset = v_offset + delta - k1;\r\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\r\n          // Mirror x2 onto top-left coordinate system.\r\n          var x2 = text1_length - v2[k2_offset];\r\n          if (x1 >= x2) {\r\n            // Overlap detected.\r\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Walk the reverse path one step.\r\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\r\n      var k2_offset = v_offset + k2;\r\n      var x2;\r\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\r\n        x2 = v2[k2_offset + 1];\r\n      } else {\r\n        x2 = v2[k2_offset - 1] + 1;\r\n      }\r\n      var y2 = x2 - k2;\r\n      while (x2 < text1_length && y2 < text2_length &&\r\n             text1.charAt(text1_length - x2 - 1) ==\r\n             text2.charAt(text2_length - y2 - 1)) {\r\n        x2++;\r\n        y2++;\r\n      }\r\n      v2[k2_offset] = x2;\r\n      if (x2 > text1_length) {\r\n        // Ran off the left of the graph.\r\n        k2end += 2;\r\n      } else if (y2 > text2_length) {\r\n        // Ran off the top of the graph.\r\n        k2start += 2;\r\n      } else if (!front) {\r\n        var k1_offset = v_offset + delta - k2;\r\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\r\n          var x1 = v1[k1_offset];\r\n          var y1 = v_offset + x1 - k1_offset;\r\n          // Mirror x2 onto top-left coordinate system.\r\n          x2 = text1_length - x2;\r\n          if (x1 >= x2) {\r\n            // Overlap detected.\r\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Diff took too long and hit the deadline or\r\n  // number of diffs equals number of characters, no commonality at all.\r\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\r\n};\r\n\r\n\r\n/**\r\n * Given the location of the 'middle snake', split the diff in two parts\r\n * and recurse.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {number} x Index of split point in text1.\r\n * @param {number} y Index of split point in text2.\r\n * @param {number} deadline Time at which to bail if not yet complete.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\r\n    deadline) {\r\n  var text1a = text1.substring(0, x);\r\n  var text2a = text2.substring(0, y);\r\n  var text1b = text1.substring(x);\r\n  var text2b = text2.substring(y);\r\n\r\n  // Compute both diffs serially.\r\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\r\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\r\n\r\n  return diffs.concat(diffsb);\r\n};\r\n\r\n\r\n/**\r\n * Split two texts into an array of strings.  Reduce the texts to a string of\r\n * hashes where each Unicode character represents one line.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\r\n *     An object containing the encoded text1, the encoded text2 and\r\n *     the array of unique strings.\r\n *     The zeroth element of the array of unique strings is intentionally blank.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\r\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\r\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\r\n\r\n  // '\\x00' is a valid character, but various debuggers don't like it.\r\n  // So we'll insert a junk entry to avoid generating a null character.\r\n  lineArray[0] = '';\r\n\r\n  /**\r\n   * Split a text into an array of strings.  Reduce the texts to a string of\r\n   * hashes where each Unicode character represents one line.\r\n   * Modifies linearray and linehash through being a closure.\r\n   * @param {string} text String to encode.\r\n   * @return {string} Encoded string.\r\n   * @private\r\n   */\r\n  function diff_linesToCharsMunge_(text) {\r\n    var chars = '';\r\n    // Walk the text, pulling out a substring for each line.\r\n    // text.split('\\n') would would temporarily double our memory footprint.\r\n    // Modifying text would create many large strings to garbage collect.\r\n    var lineStart = 0;\r\n    var lineEnd = -1;\r\n    // Keeping our own length variable is faster than looking it up.\r\n    var lineArrayLength = lineArray.length;\r\n    while (lineEnd < text.length - 1) {\r\n      lineEnd = text.indexOf('\\n', lineStart);\r\n      if (lineEnd == -1) {\r\n        lineEnd = text.length - 1;\r\n      }\r\n      var line = text.substring(lineStart, lineEnd + 1);\r\n      lineStart = lineEnd + 1;\r\n\r\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\r\n          (lineHash[line] !== undefined)) {\r\n        chars += String.fromCharCode(lineHash[line]);\r\n      } else {\r\n        chars += String.fromCharCode(lineArrayLength);\r\n        lineHash[line] = lineArrayLength;\r\n        lineArray[lineArrayLength++] = line;\r\n      }\r\n    }\r\n    return chars;\r\n  }\r\n\r\n  var chars1 = diff_linesToCharsMunge_(text1);\r\n  var chars2 = diff_linesToCharsMunge_(text2);\r\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\r\n};\r\n\r\n\r\n/**\r\n * Rehydrate the text in a diff from a string of line hashes to real lines of\r\n * text.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @param {!Array.<string>} lineArray Array of unique strings.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    var chars = diffs[x][1];\r\n    var text = [];\r\n    for (var y = 0; y < chars.length; y++) {\r\n      text[y] = lineArray[chars.charCodeAt(y)];\r\n    }\r\n    diffs[x][1] = text.join('');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Determine the common prefix of two strings.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {number} The number of characters common to the start of each\r\n *     string.\r\n */\r\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\r\n  // Quick check for common null cases.\r\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\r\n    return 0;\r\n  }\r\n  // Binary search.\r\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\r\n  var pointermin = 0;\r\n  var pointermax = Math.min(text1.length, text2.length);\r\n  var pointermid = pointermax;\r\n  var pointerstart = 0;\r\n  while (pointermin < pointermid) {\r\n    if (text1.substring(pointerstart, pointermid) ==\r\n        text2.substring(pointerstart, pointermid)) {\r\n      pointermin = pointermid;\r\n      pointerstart = pointermin;\r\n    } else {\r\n      pointermax = pointermid;\r\n    }\r\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\r\n  }\r\n  return pointermid;\r\n};\r\n\r\n\r\n/**\r\n * Determine the common suffix of two strings.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {number} The number of characters common to the end of each string.\r\n */\r\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\r\n  // Quick check for common null cases.\r\n  if (!text1 || !text2 ||\r\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\r\n    return 0;\r\n  }\r\n  // Binary search.\r\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\r\n  var pointermin = 0;\r\n  var pointermax = Math.min(text1.length, text2.length);\r\n  var pointermid = pointermax;\r\n  var pointerend = 0;\r\n  while (pointermin < pointermid) {\r\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\r\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\r\n      pointermin = pointermid;\r\n      pointerend = pointermin;\r\n    } else {\r\n      pointermax = pointermid;\r\n    }\r\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\r\n  }\r\n  return pointermid;\r\n};\r\n\r\n\r\n/**\r\n * Determine if the suffix of one string is the prefix of another.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {number} The number of characters common to the end of the first\r\n *     string and the start of the second string.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\r\n  // Cache the text lengths to prevent multiple calls.\r\n  var text1_length = text1.length;\r\n  var text2_length = text2.length;\r\n  // Eliminate the null case.\r\n  if (text1_length == 0 || text2_length == 0) {\r\n    return 0;\r\n  }\r\n  // Truncate the longer string.\r\n  if (text1_length > text2_length) {\r\n    text1 = text1.substring(text1_length - text2_length);\r\n  } else if (text1_length < text2_length) {\r\n    text2 = text2.substring(0, text1_length);\r\n  }\r\n  var text_length = Math.min(text1_length, text2_length);\r\n  // Quick check for the worst case.\r\n  if (text1 == text2) {\r\n    return text_length;\r\n  }\r\n\r\n  // Start by looking for a single character match\r\n  // and increase length until no match is found.\r\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\r\n  var best = 0;\r\n  var length = 1;\r\n  while (true) {\r\n    var pattern = text1.substring(text_length - length);\r\n    var found = text2.indexOf(pattern);\r\n    if (found == -1) {\r\n      return best;\r\n    }\r\n    length += found;\r\n    if (found == 0 || text1.substring(text_length - length) ==\r\n        text2.substring(0, length)) {\r\n      best = length;\r\n      length++;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Do the two texts share a substring which is at least half the length of the\r\n * longer text?\r\n * This speedup can produce non-minimal diffs.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {Array.<string>} Five element Array, containing the prefix of\r\n *     text1, the suffix of text1, the prefix of text2, the suffix of\r\n *     text2 and the common middle.  Or null if there was no match.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\r\n  if (this.Diff_Timeout <= 0) {\r\n    // Don't risk returning a non-optimal diff if we have unlimited time.\r\n    return null;\r\n  }\r\n  var longtext = text1.length > text2.length ? text1 : text2;\r\n  var shorttext = text1.length > text2.length ? text2 : text1;\r\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\r\n    return null;  // Pointless.\r\n  }\r\n  var dmp = this;  // 'this' becomes 'window' in a closure.\r\n\r\n  /**\r\n   * Does a substring of shorttext exist within longtext such that the substring\r\n   * is at least half the length of longtext?\r\n   * Closure, but does not reference any external variables.\r\n   * @param {string} longtext Longer string.\r\n   * @param {string} shorttext Shorter string.\r\n   * @param {number} i Start index of quarter length substring within longtext.\r\n   * @return {Array.<string>} Five element Array, containing the prefix of\r\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\r\n   *     of shorttext and the common middle.  Or null if there was no match.\r\n   * @private\r\n   */\r\n  function diff_halfMatchI_(longtext, shorttext, i) {\r\n    // Start with a 1/4 length substring at position i as a seed.\r\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\r\n    var j = -1;\r\n    var best_common = '';\r\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\r\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\r\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\r\n                                               shorttext.substring(j));\r\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\r\n                                               shorttext.substring(0, j));\r\n      if (best_common.length < suffixLength + prefixLength) {\r\n        best_common = shorttext.substring(j - suffixLength, j) +\r\n            shorttext.substring(j, j + prefixLength);\r\n        best_longtext_a = longtext.substring(0, i - suffixLength);\r\n        best_longtext_b = longtext.substring(i + prefixLength);\r\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\r\n        best_shorttext_b = shorttext.substring(j + prefixLength);\r\n      }\r\n    }\r\n    if (best_common.length * 2 >= longtext.length) {\r\n      return [best_longtext_a, best_longtext_b,\r\n              best_shorttext_a, best_shorttext_b, best_common];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // First check if the second quarter is the seed for a half-match.\r\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\r\n                             Math.ceil(longtext.length / 4));\r\n  // Check again based on the third quarter.\r\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\r\n                             Math.ceil(longtext.length / 2));\r\n  var hm;\r\n  if (!hm1 && !hm2) {\r\n    return null;\r\n  } else if (!hm2) {\r\n    hm = hm1;\r\n  } else if (!hm1) {\r\n    hm = hm2;\r\n  } else {\r\n    // Both matched.  Select the longest.\r\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\r\n  }\r\n\r\n  // A half-match was found, sort out the return data.\r\n  var text1_a, text1_b, text2_a, text2_b;\r\n  if (text1.length > text2.length) {\r\n    text1_a = hm[0];\r\n    text1_b = hm[1];\r\n    text2_a = hm[2];\r\n    text2_b = hm[3];\r\n  } else {\r\n    text2_a = hm[0];\r\n    text2_b = hm[1];\r\n    text1_a = hm[2];\r\n    text1_b = hm[3];\r\n  }\r\n  var mid_common = hm[4];\r\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\r\n};\r\n\r\n\r\n/**\r\n * Reduce the number of edits by eliminating semantically trivial equalities.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n */\r\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\r\n  var changes = false;\r\n  var equalities = [];  // Stack of indices where equalities are found.\r\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\r\n  /** @type {?string} */\r\n  var lastequality = null;\r\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\r\n  var pointer = 0;  // Index of current position.\r\n  // Number of characters that changed prior to the equality.\r\n  var length_insertions1 = 0;\r\n  var length_deletions1 = 0;\r\n  // Number of characters that changed after the equality.\r\n  var length_insertions2 = 0;\r\n  var length_deletions2 = 0;\r\n  while (pointer < diffs.length) {\r\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\r\n      equalities[equalitiesLength++] = pointer;\r\n      length_insertions1 = length_insertions2;\r\n      length_deletions1 = length_deletions2;\r\n      length_insertions2 = 0;\r\n      length_deletions2 = 0;\r\n      lastequality = diffs[pointer][1];\r\n    } else {  // An insertion or deletion.\r\n      if (diffs[pointer][0] == DIFF_INSERT) {\r\n        length_insertions2 += diffs[pointer][1].length;\r\n      } else {\r\n        length_deletions2 += diffs[pointer][1].length;\r\n      }\r\n      // Eliminate an equality that is smaller or equal to the edits on both\r\n      // sides of it.\r\n      if (lastequality && (lastequality.length <=\r\n          Math.max(length_insertions1, length_deletions1)) &&\r\n          (lastequality.length <= Math.max(length_insertions2,\r\n                                           length_deletions2))) {\r\n        // Duplicate record.\r\n        diffs.splice(equalities[equalitiesLength - 1], 0,\r\n                     [DIFF_DELETE, lastequality]);\r\n        // Change second copy to insert.\r\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\r\n        // Throw away the equality we just deleted.\r\n        equalitiesLength--;\r\n        // Throw away the previous equality (it needs to be reevaluated).\r\n        equalitiesLength--;\r\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\r\n        length_insertions1 = 0;  // Reset the counters.\r\n        length_deletions1 = 0;\r\n        length_insertions2 = 0;\r\n        length_deletions2 = 0;\r\n        lastequality = null;\r\n        changes = true;\r\n      }\r\n    }\r\n    pointer++;\r\n  }\r\n\r\n  // Normalize the diff.\r\n  if (changes) {\r\n    this.diff_cleanupMerge(diffs);\r\n  }\r\n  this.diff_cleanupSemanticLossless(diffs);\r\n\r\n  // Find any overlaps between deletions and insertions.\r\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\r\n  //   -> <del>abc</del>xxx<ins>def</ins>\r\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\r\n  //   -> <ins>def</ins>xxx<del>abc</del>\r\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\r\n  pointer = 1;\r\n  while (pointer < diffs.length) {\r\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\r\n        diffs[pointer][0] == DIFF_INSERT) {\r\n      var deletion = diffs[pointer - 1][1];\r\n      var insertion = diffs[pointer][1];\r\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\r\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\r\n      if (overlap_length1 >= overlap_length2) {\r\n        if (overlap_length1 >= deletion.length / 2 ||\r\n            overlap_length1 >= insertion.length / 2) {\r\n          // Overlap found.  Insert an equality and trim the surrounding edits.\r\n          diffs.splice(pointer, 0,\r\n              [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\r\n          diffs[pointer - 1][1] =\r\n              deletion.substring(0, deletion.length - overlap_length1);\r\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\r\n          pointer++;\r\n        }\r\n      } else {\r\n        if (overlap_length2 >= deletion.length / 2 ||\r\n            overlap_length2 >= insertion.length / 2) {\r\n          // Reverse overlap found.\r\n          // Insert an equality and swap and trim the surrounding edits.\r\n          diffs.splice(pointer, 0,\r\n              [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\r\n          diffs[pointer - 1][0] = DIFF_INSERT;\r\n          diffs[pointer - 1][1] =\r\n              insertion.substring(0, insertion.length - overlap_length2);\r\n          diffs[pointer + 1][0] = DIFF_DELETE;\r\n          diffs[pointer + 1][1] =\r\n              deletion.substring(overlap_length2);\r\n          pointer++;\r\n        }\r\n      }\r\n      pointer++;\r\n    }\r\n    pointer++;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Look for single edits surrounded on both sides by equalities\r\n * which can be shifted sideways to align the edit to a word boundary.\r\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n */\r\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\r\n  /**\r\n   * Given two strings, compute a score representing whether the internal\r\n   * boundary falls on logical boundaries.\r\n   * Scores range from 6 (best) to 0 (worst).\r\n   * Closure, but does not reference any external variables.\r\n   * @param {string} one First string.\r\n   * @param {string} two Second string.\r\n   * @return {number} The score.\r\n   * @private\r\n   */\r\n  function diff_cleanupSemanticScore_(one, two) {\r\n    if (!one || !two) {\r\n      // Edges are the best.\r\n      return 6;\r\n    }\r\n\r\n    // Each port of this function behaves slightly differently due to\r\n    // subtle differences in each language's definition of things like\r\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\r\n    // the choice has been made to use each language's native features\r\n    // rather than force total conformity.\r\n    var char1 = one.charAt(one.length - 1);\r\n    var char2 = two.charAt(0);\r\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\r\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\r\n    var whitespace1 = nonAlphaNumeric1 &&\r\n        char1.match(diff_match_patch.whitespaceRegex_);\r\n    var whitespace2 = nonAlphaNumeric2 &&\r\n        char2.match(diff_match_patch.whitespaceRegex_);\r\n    var lineBreak1 = whitespace1 &&\r\n        char1.match(diff_match_patch.linebreakRegex_);\r\n    var lineBreak2 = whitespace2 &&\r\n        char2.match(diff_match_patch.linebreakRegex_);\r\n    var blankLine1 = lineBreak1 &&\r\n        one.match(diff_match_patch.blanklineEndRegex_);\r\n    var blankLine2 = lineBreak2 &&\r\n        two.match(diff_match_patch.blanklineStartRegex_);\r\n\r\n    if (blankLine1 || blankLine2) {\r\n      // Five points for blank lines.\r\n      return 5;\r\n    } else if (lineBreak1 || lineBreak2) {\r\n      // Four points for line breaks.\r\n      return 4;\r\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\r\n      // Three points for end of sentences.\r\n      return 3;\r\n    } else if (whitespace1 || whitespace2) {\r\n      // Two points for whitespace.\r\n      return 2;\r\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\r\n      // One point for non-alphanumeric.\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  var pointer = 1;\r\n  // Intentionally ignore the first and last element (don't need checking).\r\n  while (pointer < diffs.length - 1) {\r\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\r\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\r\n      // This is a single edit surrounded by equalities.\r\n      var equality1 = diffs[pointer - 1][1];\r\n      var edit = diffs[pointer][1];\r\n      var equality2 = diffs[pointer + 1][1];\r\n\r\n      // First, shift the edit as far left as possible.\r\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\r\n      if (commonOffset) {\r\n        var commonString = edit.substring(edit.length - commonOffset);\r\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\r\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\r\n        equality2 = commonString + equality2;\r\n      }\r\n\r\n      // Second, step character by character right, looking for the best fit.\r\n      var bestEquality1 = equality1;\r\n      var bestEdit = edit;\r\n      var bestEquality2 = equality2;\r\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\r\n          diff_cleanupSemanticScore_(edit, equality2);\r\n      while (edit.charAt(0) === equality2.charAt(0)) {\r\n        equality1 += edit.charAt(0);\r\n        edit = edit.substring(1) + equality2.charAt(0);\r\n        equality2 = equality2.substring(1);\r\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\r\n            diff_cleanupSemanticScore_(edit, equality2);\r\n        // The >= encourages trailing rather than leading whitespace on edits.\r\n        if (score >= bestScore) {\r\n          bestScore = score;\r\n          bestEquality1 = equality1;\r\n          bestEdit = edit;\r\n          bestEquality2 = equality2;\r\n        }\r\n      }\r\n\r\n      if (diffs[pointer - 1][1] != bestEquality1) {\r\n        // We have an improvement, save it back to the diff.\r\n        if (bestEquality1) {\r\n          diffs[pointer - 1][1] = bestEquality1;\r\n        } else {\r\n          diffs.splice(pointer - 1, 1);\r\n          pointer--;\r\n        }\r\n        diffs[pointer][1] = bestEdit;\r\n        if (bestEquality2) {\r\n          diffs[pointer + 1][1] = bestEquality2;\r\n        } else {\r\n          diffs.splice(pointer + 1, 1);\r\n          pointer--;\r\n        }\r\n      }\r\n    }\r\n    pointer++;\r\n  }\r\n};\r\n\r\n// Define some regex patterns for matching boundaries.\r\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\r\ndiff_match_patch.whitespaceRegex_ = /\\s/;\r\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\r\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\r\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\r\n\r\n/**\r\n * Reduce the number of edits by eliminating operationally trivial equalities.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n */\r\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\r\n  var changes = false;\r\n  var equalities = [];  // Stack of indices where equalities are found.\r\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\r\n  /** @type {?string} */\r\n  var lastequality = null;\r\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\r\n  var pointer = 0;  // Index of current position.\r\n  // Is there an insertion operation before the last equality.\r\n  var pre_ins = false;\r\n  // Is there a deletion operation before the last equality.\r\n  var pre_del = false;\r\n  // Is there an insertion operation after the last equality.\r\n  var post_ins = false;\r\n  // Is there a deletion operation after the last equality.\r\n  var post_del = false;\r\n  while (pointer < diffs.length) {\r\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\r\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\r\n          (post_ins || post_del)) {\r\n        // Candidate found.\r\n        equalities[equalitiesLength++] = pointer;\r\n        pre_ins = post_ins;\r\n        pre_del = post_del;\r\n        lastequality = diffs[pointer][1];\r\n      } else {\r\n        // Not a candidate, and can never become one.\r\n        equalitiesLength = 0;\r\n        lastequality = null;\r\n      }\r\n      post_ins = post_del = false;\r\n    } else {  // An insertion or deletion.\r\n      if (diffs[pointer][0] == DIFF_DELETE) {\r\n        post_del = true;\r\n      } else {\r\n        post_ins = true;\r\n      }\r\n      /*\r\n       * Five types to be split:\r\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\r\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\r\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\r\n       * <ins>A</del>X<ins>C</ins><del>D</del>\r\n       * <ins>A</ins><del>B</del>X<del>C</del>\r\n       */\r\n      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||\r\n                           ((lastequality.length < this.Diff_EditCost / 2) &&\r\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\r\n        // Duplicate record.\r\n        diffs.splice(equalities[equalitiesLength - 1], 0,\r\n                     [DIFF_DELETE, lastequality]);\r\n        // Change second copy to insert.\r\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\r\n        equalitiesLength--;  // Throw away the equality we just deleted;\r\n        lastequality = null;\r\n        if (pre_ins && pre_del) {\r\n          // No changes made which could affect previous entry, keep going.\r\n          post_ins = post_del = true;\r\n          equalitiesLength = 0;\r\n        } else {\r\n          equalitiesLength--;  // Throw away the previous equality.\r\n          pointer = equalitiesLength > 0 ?\r\n              equalities[equalitiesLength - 1] : -1;\r\n          post_ins = post_del = false;\r\n        }\r\n        changes = true;\r\n      }\r\n    }\r\n    pointer++;\r\n  }\r\n\r\n  if (changes) {\r\n    this.diff_cleanupMerge(diffs);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Reorder and merge like edit sections.  Merge equalities.\r\n * Any edit section can move as long as it doesn't cross an equality.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n */\r\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\r\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\r\n  var pointer = 0;\r\n  var count_delete = 0;\r\n  var count_insert = 0;\r\n  var text_delete = '';\r\n  var text_insert = '';\r\n  var commonlength;\r\n  while (pointer < diffs.length) {\r\n    switch (diffs[pointer][0]) {\r\n      case DIFF_INSERT:\r\n        count_insert++;\r\n        text_insert += diffs[pointer][1];\r\n        pointer++;\r\n        break;\r\n      case DIFF_DELETE:\r\n        count_delete++;\r\n        text_delete += diffs[pointer][1];\r\n        pointer++;\r\n        break;\r\n      case DIFF_EQUAL:\r\n        // Upon reaching an equality, check for prior redundancies.\r\n        if (count_delete + count_insert > 1) {\r\n          if (count_delete !== 0 && count_insert !== 0) {\r\n            // Factor out any common prefixies.\r\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\r\n            if (commonlength !== 0) {\r\n              if ((pointer - count_delete - count_insert) > 0 &&\r\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\r\n                  DIFF_EQUAL) {\r\n                diffs[pointer - count_delete - count_insert - 1][1] +=\r\n                    text_insert.substring(0, commonlength);\r\n              } else {\r\n                diffs.splice(0, 0, [DIFF_EQUAL,\r\n                                    text_insert.substring(0, commonlength)]);\r\n                pointer++;\r\n              }\r\n              text_insert = text_insert.substring(commonlength);\r\n              text_delete = text_delete.substring(commonlength);\r\n            }\r\n            // Factor out any common suffixies.\r\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\r\n            if (commonlength !== 0) {\r\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\r\n                  commonlength) + diffs[pointer][1];\r\n              text_insert = text_insert.substring(0, text_insert.length -\r\n                  commonlength);\r\n              text_delete = text_delete.substring(0, text_delete.length -\r\n                  commonlength);\r\n            }\r\n          }\r\n          // Delete the offending records and add the merged ones.\r\n          if (count_delete === 0) {\r\n            diffs.splice(pointer - count_insert,\r\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\r\n          } else if (count_insert === 0) {\r\n            diffs.splice(pointer - count_delete,\r\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\r\n          } else {\r\n            diffs.splice(pointer - count_delete - count_insert,\r\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\r\n                [DIFF_INSERT, text_insert]);\r\n          }\r\n          pointer = pointer - count_delete - count_insert +\r\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\r\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\r\n          // Merge this equality with the previous one.\r\n          diffs[pointer - 1][1] += diffs[pointer][1];\r\n          diffs.splice(pointer, 1);\r\n        } else {\r\n          pointer++;\r\n        }\r\n        count_insert = 0;\r\n        count_delete = 0;\r\n        text_delete = '';\r\n        text_insert = '';\r\n        break;\r\n    }\r\n  }\r\n  if (diffs[diffs.length - 1][1] === '') {\r\n    diffs.pop();  // Remove the dummy entry at the end.\r\n  }\r\n\r\n  // Second pass: look for single edits surrounded on both sides by equalities\r\n  // which can be shifted sideways to eliminate an equality.\r\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\r\n  var changes = false;\r\n  pointer = 1;\r\n  // Intentionally ignore the first and last element (don't need checking).\r\n  while (pointer < diffs.length - 1) {\r\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\r\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\r\n      // This is a single edit surrounded by equalities.\r\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\r\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\r\n        // Shift the edit over the previous equality.\r\n        diffs[pointer][1] = diffs[pointer - 1][1] +\r\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\r\n                                        diffs[pointer - 1][1].length);\r\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\r\n        diffs.splice(pointer - 1, 1);\r\n        changes = true;\r\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\r\n          diffs[pointer + 1][1]) {\r\n        // Shift the edit over the next equality.\r\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\r\n        diffs[pointer][1] =\r\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\r\n            diffs[pointer + 1][1];\r\n        diffs.splice(pointer + 1, 1);\r\n        changes = true;\r\n      }\r\n    }\r\n    pointer++;\r\n  }\r\n  // If shifts were made, the diff needs reordering and another shift sweep.\r\n  if (changes) {\r\n    this.diff_cleanupMerge(diffs);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * loc is a location in text1, compute and return the equivalent location in\r\n * text2.\r\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @param {number} loc Location within text1.\r\n * @return {number} Location within text2.\r\n */\r\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\r\n  var chars1 = 0;\r\n  var chars2 = 0;\r\n  var last_chars1 = 0;\r\n  var last_chars2 = 0;\r\n  var x;\r\n  for (x = 0; x < diffs.length; x++) {\r\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\r\n      chars1 += diffs[x][1].length;\r\n    }\r\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\r\n      chars2 += diffs[x][1].length;\r\n    }\r\n    if (chars1 > loc) {  // Overshot the location.\r\n      break;\r\n    }\r\n    last_chars1 = chars1;\r\n    last_chars2 = chars2;\r\n  }\r\n  // Was the location was deleted?\r\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\r\n    return last_chars2;\r\n  }\r\n  // Add the remaining character length.\r\n  return last_chars2 + (loc - last_chars1);\r\n};\r\n\r\n\r\n/**\r\n * Convert a diff array into a pretty HTML report.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @return {string} HTML representation.\r\n */\r\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\r\n  var html = [];\r\n  var pattern_amp = /&/g;\r\n  var pattern_lt = /</g;\r\n  var pattern_gt = />/g;\r\n  var pattern_para = /\\n/g;\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\r\n    var data = diffs[x][1];  // Text of change.\r\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\r\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\r\n    switch (op) {\r\n      case DIFF_INSERT:\r\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\r\n        break;\r\n      case DIFF_DELETE:\r\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\r\n        break;\r\n      case DIFF_EQUAL:\r\n        html[x] = '<span>' + text + '</span>';\r\n        break;\r\n    }\r\n  }\r\n  return html.join('');\r\n};\r\n\r\n\r\n/**\r\n * Compute and return the source text (all equalities and deletions).\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @return {string} Source text.\r\n */\r\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\r\n  var text = [];\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    if (diffs[x][0] !== DIFF_INSERT) {\r\n      text[x] = diffs[x][1];\r\n    }\r\n  }\r\n  return text.join('');\r\n};\r\n\r\n\r\n/**\r\n * Compute and return the destination text (all equalities and insertions).\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @return {string} Destination text.\r\n */\r\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\r\n  var text = [];\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    if (diffs[x][0] !== DIFF_DELETE) {\r\n      text[x] = diffs[x][1];\r\n    }\r\n  }\r\n  return text.join('');\r\n};\r\n\r\n\r\n/**\r\n * Compute the Levenshtein distance; the number of inserted, deleted or\r\n * substituted characters.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @return {number} Number of changes.\r\n */\r\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\r\n  var levenshtein = 0;\r\n  var insertions = 0;\r\n  var deletions = 0;\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    var op = diffs[x][0];\r\n    var data = diffs[x][1];\r\n    switch (op) {\r\n      case DIFF_INSERT:\r\n        insertions += data.length;\r\n        break;\r\n      case DIFF_DELETE:\r\n        deletions += data.length;\r\n        break;\r\n      case DIFF_EQUAL:\r\n        // A deletion and an insertion is one substitution.\r\n        levenshtein += Math.max(insertions, deletions);\r\n        insertions = 0;\r\n        deletions = 0;\r\n        break;\r\n    }\r\n  }\r\n  levenshtein += Math.max(insertions, deletions);\r\n  return levenshtein;\r\n};\r\n\r\n\r\n/**\r\n * Crush the diff into an encoded string which describes the operations\r\n * required to transform text1 into text2.\r\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\r\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n * @return {string} Delta text.\r\n */\r\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\r\n  var text = [];\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    switch (diffs[x][0]) {\r\n      case DIFF_INSERT:\r\n        text[x] = '+' + encodeURI(diffs[x][1]);\r\n        break;\r\n      case DIFF_DELETE:\r\n        text[x] = '-' + diffs[x][1].length;\r\n        break;\r\n      case DIFF_EQUAL:\r\n        text[x] = '=' + diffs[x][1].length;\r\n        break;\r\n    }\r\n  }\r\n  return text.join('\\t').replace(/%20/g, ' ');\r\n};\r\n\r\n\r\n/**\r\n * Given the original text1, and an encoded string which describes the\r\n * operations required to transform text1 into text2, compute the full diff.\r\n * @param {string} text1 Source string for the diff.\r\n * @param {string} delta Delta text.\r\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\r\n * @throws {!Error} If invalid input.\r\n */\r\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\r\n  var diffs = [];\r\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\r\n  var pointer = 0;  // Cursor in text1\r\n  var tokens = delta.split(/\\t/g);\r\n  for (var x = 0; x < tokens.length; x++) {\r\n    // Each token begins with a one character parameter which specifies the\r\n    // operation of this token (delete, insert, equality).\r\n    var param = tokens[x].substring(1);\r\n    switch (tokens[x].charAt(0)) {\r\n      case '+':\r\n        try {\r\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\r\n        } catch (ex) {\r\n          // Malformed URI sequence.\r\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\r\n        }\r\n        break;\r\n      case '-':\r\n        // Fall through.\r\n      case '=':\r\n        var n = parseInt(param, 10);\r\n        if (isNaN(n) || n < 0) {\r\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\r\n        }\r\n        var text = text1.substring(pointer, pointer += n);\r\n        if (tokens[x].charAt(0) == '=') {\r\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\r\n        } else {\r\n          diffs[diffsLength++] = [DIFF_DELETE, text];\r\n        }\r\n        break;\r\n      default:\r\n        // Blank tokens are ok (from a trailing \\t).\r\n        // Anything else is an error.\r\n        if (tokens[x]) {\r\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\r\n                          tokens[x]);\r\n        }\r\n    }\r\n  }\r\n  if (pointer != text1.length) {\r\n    throw new Error('Delta length (' + pointer +\r\n        ') does not equal source text length (' + text1.length + ').');\r\n  }\r\n  return diffs;\r\n};\r\n\r\n\r\n//  MATCH FUNCTIONS\r\n\r\n\r\n/**\r\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\r\n * @param {string} text The text to search.\r\n * @param {string} pattern The pattern to search for.\r\n * @param {number} loc The location to search around.\r\n * @return {number} Best match index or -1.\r\n */\r\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\r\n  // Check for null inputs.\r\n  if (text == null || pattern == null || loc == null) {\r\n    throw new Error('Null input. (match_main)');\r\n  }\r\n\r\n  loc = Math.max(0, Math.min(loc, text.length));\r\n  if (text == pattern) {\r\n    // Shortcut (potentially not guaranteed by the algorithm)\r\n    return 0;\r\n  } else if (!text.length) {\r\n    // Nothing to match.\r\n    return -1;\r\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\r\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\r\n    return loc;\r\n  } else {\r\n    // Do a fuzzy compare.\r\n    return this.match_bitap_(text, pattern, loc);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\r\n * Bitap algorithm.\r\n * @param {string} text The text to search.\r\n * @param {string} pattern The pattern to search for.\r\n * @param {number} loc The location to search around.\r\n * @return {number} Best match index or -1.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\r\n  if (pattern.length > this.Match_MaxBits) {\r\n    throw new Error('Pattern too long for this browser.');\r\n  }\r\n\r\n  // Initialise the alphabet.\r\n  var s = this.match_alphabet_(pattern);\r\n\r\n  var dmp = this;  // 'this' becomes 'window' in a closure.\r\n\r\n  /**\r\n   * Compute and return the score for a match with e errors and x location.\r\n   * Accesses loc and pattern through being a closure.\r\n   * @param {number} e Number of errors in match.\r\n   * @param {number} x Location of match.\r\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\r\n   * @private\r\n   */\r\n  function match_bitapScore_(e, x) {\r\n    var accuracy = e / pattern.length;\r\n    var proximity = Math.abs(loc - x);\r\n    if (!dmp.Match_Distance) {\r\n      // Dodge divide by zero error.\r\n      return proximity ? 1.0 : accuracy;\r\n    }\r\n    return accuracy + (proximity / dmp.Match_Distance);\r\n  }\r\n\r\n  // Highest score beyond which we give up.\r\n  var score_threshold = this.Match_Threshold;\r\n  // Is there a nearby exact match? (speedup)\r\n  var best_loc = text.indexOf(pattern, loc);\r\n  if (best_loc != -1) {\r\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\r\n    // What about in the other direction? (speedup)\r\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\r\n    if (best_loc != -1) {\r\n      score_threshold =\r\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\r\n    }\r\n  }\r\n\r\n  // Initialise the bit arrays.\r\n  var matchmask = 1 << (pattern.length - 1);\r\n  best_loc = -1;\r\n\r\n  var bin_min, bin_mid;\r\n  var bin_max = pattern.length + text.length;\r\n  var last_rd;\r\n  for (var d = 0; d < pattern.length; d++) {\r\n    // Scan for the best match; each iteration allows for one more error.\r\n    // Run a binary search to determine how far from 'loc' we can stray at this\r\n    // error level.\r\n    bin_min = 0;\r\n    bin_mid = bin_max;\r\n    while (bin_min < bin_mid) {\r\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\r\n        bin_min = bin_mid;\r\n      } else {\r\n        bin_max = bin_mid;\r\n      }\r\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\r\n    }\r\n    // Use the result from this iteration as the maximum for the next.\r\n    bin_max = bin_mid;\r\n    var start = Math.max(1, loc - bin_mid + 1);\r\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\r\n\r\n    var rd = Array(finish + 2);\r\n    rd[finish + 1] = (1 << d) - 1;\r\n    for (var j = finish; j >= start; j--) {\r\n      // The alphabet (s) is a sparse hash, so the following line generates\r\n      // warnings.\r\n      var charMatch = s[text.charAt(j - 1)];\r\n      if (d === 0) {  // First pass: exact match.\r\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\r\n      } else {  // Subsequent passes: fuzzy match.\r\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\r\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\r\n                last_rd[j + 1];\r\n      }\r\n      if (rd[j] & matchmask) {\r\n        var score = match_bitapScore_(d, j - 1);\r\n        // This match will almost certainly be better than any existing match.\r\n        // But check anyway.\r\n        if (score <= score_threshold) {\r\n          // Told you so.\r\n          score_threshold = score;\r\n          best_loc = j - 1;\r\n          if (best_loc > loc) {\r\n            // When passing loc, don't exceed our current distance from loc.\r\n            start = Math.max(1, 2 * loc - best_loc);\r\n          } else {\r\n            // Already passed loc, downhill from here on in.\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // No hope for a (better) match at greater error levels.\r\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\r\n      break;\r\n    }\r\n    last_rd = rd;\r\n  }\r\n  return best_loc;\r\n};\r\n\r\n\r\n/**\r\n * Initialise the alphabet for the Bitap algorithm.\r\n * @param {string} pattern The text to encode.\r\n * @return {!Object} Hash of character locations.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\r\n  var s = {};\r\n  for (var i = 0; i < pattern.length; i++) {\r\n    s[pattern.charAt(i)] = 0;\r\n  }\r\n  for (var i = 0; i < pattern.length; i++) {\r\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\r\n  }\r\n  return s;\r\n};\r\n\r\n\r\n//  PATCH FUNCTIONS\r\n\r\n\r\n/**\r\n * Increase the context until it is unique,\r\n * but don't let the pattern expand beyond Match_MaxBits.\r\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\r\n * @param {string} text Source text.\r\n * @private\r\n */\r\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\r\n  if (text.length == 0) {\r\n    return;\r\n  }\r\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\r\n  var padding = 0;\r\n\r\n  // Look for the first and last matches of pattern in text.  If two different\r\n  // matches are found, increase the pattern length.\r\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\r\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\r\n         this.Patch_Margin) {\r\n    padding += this.Patch_Margin;\r\n    pattern = text.substring(patch.start2 - padding,\r\n                             patch.start2 + patch.length1 + padding);\r\n  }\r\n  // Add one chunk for good luck.\r\n  padding += this.Patch_Margin;\r\n\r\n  // Add the prefix.\r\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\r\n  if (prefix) {\r\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\r\n  }\r\n  // Add the suffix.\r\n  var suffix = text.substring(patch.start2 + patch.length1,\r\n                              patch.start2 + patch.length1 + padding);\r\n  if (suffix) {\r\n    patch.diffs.push([DIFF_EQUAL, suffix]);\r\n  }\r\n\r\n  // Roll back the start points.\r\n  patch.start1 -= prefix.length;\r\n  patch.start2 -= prefix.length;\r\n  // Extend the lengths.\r\n  patch.length1 += prefix.length + suffix.length;\r\n  patch.length2 += prefix.length + suffix.length;\r\n};\r\n\r\n\r\n/**\r\n * Compute a list of patches to turn text1 into text2.\r\n * Use diffs if provided, otherwise compute it ourselves.\r\n * There are four ways to call this function, depending on what data is\r\n * available to the caller:\r\n * Method 1:\r\n * a = text1, b = text2\r\n * Method 2:\r\n * a = diffs\r\n * Method 3 (optimal):\r\n * a = text1, b = diffs\r\n * Method 4 (deprecated, use method 3):\r\n * a = text1, b = text2, c = diffs\r\n *\r\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\r\n * Array of diff tuples for text1 to text2 (method 2).\r\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\r\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\r\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\r\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\r\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\r\n */\r\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\r\n  var text1, diffs;\r\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\r\n      typeof opt_c == 'undefined') {\r\n    // Method 1: text1, text2\r\n    // Compute diffs from text1 and text2.\r\n    text1 = /** @type {string} */(a);\r\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\r\n    if (diffs.length > 2) {\r\n      this.diff_cleanupSemantic(diffs);\r\n      this.diff_cleanupEfficiency(diffs);\r\n    }\r\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\r\n      typeof opt_c == 'undefined') {\r\n    // Method 2: diffs\r\n    // Compute text1 from diffs.\r\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\r\n    text1 = this.diff_text1(diffs);\r\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\r\n      typeof opt_c == 'undefined') {\r\n    // Method 3: text1, diffs\r\n    text1 = /** @type {string} */(a);\r\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\r\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\r\n      opt_c && typeof opt_c == 'object') {\r\n    // Method 4: text1, text2, diffs\r\n    // text2 is not used.\r\n    text1 = /** @type {string} */(a);\r\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\r\n  } else {\r\n    throw new Error('Unknown call format to patch_make.');\r\n  }\r\n\r\n  if (diffs.length === 0) {\r\n    return [];  // Get rid of the null case.\r\n  }\r\n  var patches = [];\r\n  var patch = new diff_match_patch.patch_obj();\r\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\r\n  var char_count1 = 0;  // Number of characters into the text1 string.\r\n  var char_count2 = 0;  // Number of characters into the text2 string.\r\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\r\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\r\n  // context info.\r\n  var prepatch_text = text1;\r\n  var postpatch_text = text1;\r\n  for (var x = 0; x < diffs.length; x++) {\r\n    var diff_type = diffs[x][0];\r\n    var diff_text = diffs[x][1];\r\n\r\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\r\n      // A new patch starts here.\r\n      patch.start1 = char_count1;\r\n      patch.start2 = char_count2;\r\n    }\r\n\r\n    switch (diff_type) {\r\n      case DIFF_INSERT:\r\n        patch.diffs[patchDiffLength++] = diffs[x];\r\n        patch.length2 += diff_text.length;\r\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\r\n                         postpatch_text.substring(char_count2);\r\n        break;\r\n      case DIFF_DELETE:\r\n        patch.length1 += diff_text.length;\r\n        patch.diffs[patchDiffLength++] = diffs[x];\r\n        postpatch_text = postpatch_text.substring(0, char_count2) +\r\n                         postpatch_text.substring(char_count2 +\r\n                             diff_text.length);\r\n        break;\r\n      case DIFF_EQUAL:\r\n        if (diff_text.length <= 2 * this.Patch_Margin &&\r\n            patchDiffLength && diffs.length != x + 1) {\r\n          // Small equality inside a patch.\r\n          patch.diffs[patchDiffLength++] = diffs[x];\r\n          patch.length1 += diff_text.length;\r\n          patch.length2 += diff_text.length;\r\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\r\n          // Time for a new patch.\r\n          if (patchDiffLength) {\r\n            this.patch_addContext_(patch, prepatch_text);\r\n            patches.push(patch);\r\n            patch = new diff_match_patch.patch_obj();\r\n            patchDiffLength = 0;\r\n            // Unlike Unidiff, our patch lists have a rolling context.\r\n            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\r\n            // Update prepatch text & pos to reflect the application of the\r\n            // just completed patch.\r\n            prepatch_text = postpatch_text;\r\n            char_count1 = char_count2;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n\r\n    // Update the current character count.\r\n    if (diff_type !== DIFF_INSERT) {\r\n      char_count1 += diff_text.length;\r\n    }\r\n    if (diff_type !== DIFF_DELETE) {\r\n      char_count2 += diff_text.length;\r\n    }\r\n  }\r\n  // Pick up the leftover patch if not empty.\r\n  if (patchDiffLength) {\r\n    this.patch_addContext_(patch, prepatch_text);\r\n    patches.push(patch);\r\n  }\r\n\r\n  return patches;\r\n};\r\n\r\n\r\n/**\r\n * Given an array of patches, return another array that is identical.\r\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\r\n */\r\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\r\n  // Making deep copies is hard in JavaScript.\r\n  var patchesCopy = [];\r\n  for (var x = 0; x < patches.length; x++) {\r\n    var patch = patches[x];\r\n    var patchCopy = new diff_match_patch.patch_obj();\r\n    patchCopy.diffs = [];\r\n    for (var y = 0; y < patch.diffs.length; y++) {\r\n      patchCopy.diffs[y] = patch.diffs[y].slice();\r\n    }\r\n    patchCopy.start1 = patch.start1;\r\n    patchCopy.start2 = patch.start2;\r\n    patchCopy.length1 = patch.length1;\r\n    patchCopy.length2 = patch.length2;\r\n    patchesCopy[x] = patchCopy;\r\n  }\r\n  return patchesCopy;\r\n};\r\n\r\n\r\n/**\r\n * Merge a set of patches onto the text.  Return a patched text, as well\r\n * as a list of true/false values indicating which patches were applied.\r\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n * @param {string} text Old text.\r\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\r\n *      new text and an array of boolean values.\r\n */\r\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\r\n  if (patches.length == 0) {\r\n    return [text, []];\r\n  }\r\n\r\n  // Deep copy the patches so that no changes are made to originals.\r\n  patches = this.patch_deepCopy(patches);\r\n\r\n  var nullPadding = this.patch_addPadding(patches);\r\n  text = nullPadding + text + nullPadding;\r\n\r\n  this.patch_splitMax(patches);\r\n  // delta keeps track of the offset between the expected and actual location\r\n  // of the previous patch.  If there are patches expected at positions 10 and\r\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\r\n  // has an effective expected position of 22.\r\n  var delta = 0;\r\n  var results = [];\r\n  for (var x = 0; x < patches.length; x++) {\r\n    var expected_loc = patches[x].start2 + delta;\r\n    var text1 = this.diff_text1(patches[x].diffs);\r\n    var start_loc;\r\n    var end_loc = -1;\r\n    if (text1.length > this.Match_MaxBits) {\r\n      // patch_splitMax will only provide an oversized pattern in the case of\r\n      // a monster delete.\r\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\r\n                                  expected_loc);\r\n      if (start_loc != -1) {\r\n        end_loc = this.match_main(text,\r\n            text1.substring(text1.length - this.Match_MaxBits),\r\n            expected_loc + text1.length - this.Match_MaxBits);\r\n        if (end_loc == -1 || start_loc >= end_loc) {\r\n          // Can't find valid trailing context.  Drop this patch.\r\n          start_loc = -1;\r\n        }\r\n      }\r\n    } else {\r\n      start_loc = this.match_main(text, text1, expected_loc);\r\n    }\r\n    if (start_loc == -1) {\r\n      // No match found.  :(\r\n      results[x] = false;\r\n      // Subtract the delta for this failed patch from subsequent patches.\r\n      delta -= patches[x].length2 - patches[x].length1;\r\n    } else {\r\n      // Found a match.  :)\r\n      results[x] = true;\r\n      delta = start_loc - expected_loc;\r\n      var text2;\r\n      if (end_loc == -1) {\r\n        text2 = text.substring(start_loc, start_loc + text1.length);\r\n      } else {\r\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\r\n      }\r\n      if (text1 == text2) {\r\n        // Perfect match, just shove the replacement text in.\r\n        text = text.substring(0, start_loc) +\r\n               this.diff_text2(patches[x].diffs) +\r\n               text.substring(start_loc + text1.length);\r\n      } else {\r\n        // Imperfect match.  Run a diff to get a framework of equivalent\r\n        // indices.\r\n        var diffs = this.diff_main(text1, text2, false);\r\n        if (text1.length > this.Match_MaxBits &&\r\n            this.diff_levenshtein(diffs) / text1.length >\r\n            this.Patch_DeleteThreshold) {\r\n          // The end points match, but the content is unacceptably bad.\r\n          results[x] = false;\r\n        } else {\r\n          this.diff_cleanupSemanticLossless(diffs);\r\n          var index1 = 0;\r\n          var index2;\r\n          for (var y = 0; y < patches[x].diffs.length; y++) {\r\n            var mod = patches[x].diffs[y];\r\n            if (mod[0] !== DIFF_EQUAL) {\r\n              index2 = this.diff_xIndex(diffs, index1);\r\n            }\r\n            if (mod[0] === DIFF_INSERT) {  // Insertion\r\n              text = text.substring(0, start_loc + index2) + mod[1] +\r\n                     text.substring(start_loc + index2);\r\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\r\n              text = text.substring(0, start_loc + index2) +\r\n                     text.substring(start_loc + this.diff_xIndex(diffs,\r\n                         index1 + mod[1].length));\r\n            }\r\n            if (mod[0] !== DIFF_DELETE) {\r\n              index1 += mod[1].length;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Strip the padding off.\r\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\r\n  return [text, results];\r\n};\r\n\r\n\r\n/**\r\n * Add some padding on text start and end so that edges can match something.\r\n * Intended to be called only from within patch_apply.\r\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n * @return {string} The padding string added to each side.\r\n */\r\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\r\n  var paddingLength = this.Patch_Margin;\r\n  var nullPadding = '';\r\n  for (var x = 1; x <= paddingLength; x++) {\r\n    nullPadding += String.fromCharCode(x);\r\n  }\r\n\r\n  // Bump all the patches forward.\r\n  for (var x = 0; x < patches.length; x++) {\r\n    patches[x].start1 += paddingLength;\r\n    patches[x].start2 += paddingLength;\r\n  }\r\n\r\n  // Add some padding on start of first diff.\r\n  var patch = patches[0];\r\n  var diffs = patch.diffs;\r\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\r\n    // Add nullPadding equality.\r\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\r\n    patch.start1 -= paddingLength;  // Should be 0.\r\n    patch.start2 -= paddingLength;  // Should be 0.\r\n    patch.length1 += paddingLength;\r\n    patch.length2 += paddingLength;\r\n  } else if (paddingLength > diffs[0][1].length) {\r\n    // Grow first equality.\r\n    var extraLength = paddingLength - diffs[0][1].length;\r\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\r\n    patch.start1 -= extraLength;\r\n    patch.start2 -= extraLength;\r\n    patch.length1 += extraLength;\r\n    patch.length2 += extraLength;\r\n  }\r\n\r\n  // Add some padding on end of last diff.\r\n  patch = patches[patches.length - 1];\r\n  diffs = patch.diffs;\r\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\r\n    // Add nullPadding equality.\r\n    diffs.push([DIFF_EQUAL, nullPadding]);\r\n    patch.length1 += paddingLength;\r\n    patch.length2 += paddingLength;\r\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\r\n    // Grow last equality.\r\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\r\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\r\n    patch.length1 += extraLength;\r\n    patch.length2 += extraLength;\r\n  }\r\n\r\n  return nullPadding;\r\n};\r\n\r\n\r\n/**\r\n * Look through the patches and break up any which are longer than the maximum\r\n * limit of the match algorithm.\r\n * Intended to be called only from within patch_apply.\r\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n */\r\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\r\n  var patch_size = this.Match_MaxBits;\r\n  for (var x = 0; x < patches.length; x++) {\r\n    if (patches[x].length1 <= patch_size) {\r\n      continue;\r\n    }\r\n    var bigpatch = patches[x];\r\n    // Remove the big old patch.\r\n    patches.splice(x--, 1);\r\n    var start1 = bigpatch.start1;\r\n    var start2 = bigpatch.start2;\r\n    var precontext = '';\r\n    while (bigpatch.diffs.length !== 0) {\r\n      // Create one of several smaller patches.\r\n      var patch = new diff_match_patch.patch_obj();\r\n      var empty = true;\r\n      patch.start1 = start1 - precontext.length;\r\n      patch.start2 = start2 - precontext.length;\r\n      if (precontext !== '') {\r\n        patch.length1 = patch.length2 = precontext.length;\r\n        patch.diffs.push([DIFF_EQUAL, precontext]);\r\n      }\r\n      while (bigpatch.diffs.length !== 0 &&\r\n             patch.length1 < patch_size - this.Patch_Margin) {\r\n        var diff_type = bigpatch.diffs[0][0];\r\n        var diff_text = bigpatch.diffs[0][1];\r\n        if (diff_type === DIFF_INSERT) {\r\n          // Insertions are harmless.\r\n          patch.length2 += diff_text.length;\r\n          start2 += diff_text.length;\r\n          patch.diffs.push(bigpatch.diffs.shift());\r\n          empty = false;\r\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\r\n                   patch.diffs[0][0] == DIFF_EQUAL &&\r\n                   diff_text.length > 2 * patch_size) {\r\n          // This is a large deletion.  Let it pass in one chunk.\r\n          patch.length1 += diff_text.length;\r\n          start1 += diff_text.length;\r\n          empty = false;\r\n          patch.diffs.push([diff_type, diff_text]);\r\n          bigpatch.diffs.shift();\r\n        } else {\r\n          // Deletion or equality.  Only take as much as we can stomach.\r\n          diff_text = diff_text.substring(0,\r\n              patch_size - patch.length1 - this.Patch_Margin);\r\n          patch.length1 += diff_text.length;\r\n          start1 += diff_text.length;\r\n          if (diff_type === DIFF_EQUAL) {\r\n            patch.length2 += diff_text.length;\r\n            start2 += diff_text.length;\r\n          } else {\r\n            empty = false;\r\n          }\r\n          patch.diffs.push([diff_type, diff_text]);\r\n          if (diff_text == bigpatch.diffs[0][1]) {\r\n            bigpatch.diffs.shift();\r\n          } else {\r\n            bigpatch.diffs[0][1] =\r\n                bigpatch.diffs[0][1].substring(diff_text.length);\r\n          }\r\n        }\r\n      }\r\n      // Compute the head context for the next patch.\r\n      precontext = this.diff_text2(patch.diffs);\r\n      precontext =\r\n          precontext.substring(precontext.length - this.Patch_Margin);\r\n      // Append the end context for this patch.\r\n      var postcontext = this.diff_text1(bigpatch.diffs)\r\n                            .substring(0, this.Patch_Margin);\r\n      if (postcontext !== '') {\r\n        patch.length1 += postcontext.length;\r\n        patch.length2 += postcontext.length;\r\n        if (patch.diffs.length !== 0 &&\r\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\r\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\r\n        } else {\r\n          patch.diffs.push([DIFF_EQUAL, postcontext]);\r\n        }\r\n      }\r\n      if (!empty) {\r\n        patches.splice(++x, 0, patch);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Take a list of patches and return a textual representation.\r\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\r\n * @return {string} Text representation of patches.\r\n */\r\ndiff_match_patch.prototype.patch_toText = function(patches) {\r\n  var text = [];\r\n  for (var x = 0; x < patches.length; x++) {\r\n    text[x] = patches[x];\r\n  }\r\n  return text.join('');\r\n};\r\n\r\n\r\n/**\r\n * Parse a textual representation of patches and return a list of Patch objects.\r\n * @param {string} textline Text representation of patches.\r\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\r\n * @throws {!Error} If invalid input.\r\n */\r\ndiff_match_patch.prototype.patch_fromText = function(textline) {\r\n  var patches = [];\r\n  if (!textline) {\r\n    return patches;\r\n  }\r\n  var text = textline.split('\\n');\r\n  var textPointer = 0;\r\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\r\n  while (textPointer < text.length) {\r\n    var m = text[textPointer].match(patchHeader);\r\n    if (!m) {\r\n      throw new Error('Invalid patch string: ' + text[textPointer]);\r\n    }\r\n    var patch = new diff_match_patch.patch_obj();\r\n    patches.push(patch);\r\n    patch.start1 = parseInt(m[1], 10);\r\n    if (m[2] === '') {\r\n      patch.start1--;\r\n      patch.length1 = 1;\r\n    } else if (m[2] == '0') {\r\n      patch.length1 = 0;\r\n    } else {\r\n      patch.start1--;\r\n      patch.length1 = parseInt(m[2], 10);\r\n    }\r\n\r\n    patch.start2 = parseInt(m[3], 10);\r\n    if (m[4] === '') {\r\n      patch.start2--;\r\n      patch.length2 = 1;\r\n    } else if (m[4] == '0') {\r\n      patch.length2 = 0;\r\n    } else {\r\n      patch.start2--;\r\n      patch.length2 = parseInt(m[4], 10);\r\n    }\r\n    textPointer++;\r\n\r\n    while (textPointer < text.length) {\r\n      var sign = text[textPointer].charAt(0);\r\n      try {\r\n        var line = decodeURI(text[textPointer].substring(1));\r\n      } catch (ex) {\r\n        // Malformed URI sequence.\r\n        throw new Error('Illegal escape in patch_fromText: ' + line);\r\n      }\r\n      if (sign == '-') {\r\n        // Deletion.\r\n        patch.diffs.push([DIFF_DELETE, line]);\r\n      } else if (sign == '+') {\r\n        // Insertion.\r\n        patch.diffs.push([DIFF_INSERT, line]);\r\n      } else if (sign == ' ') {\r\n        // Minor equality.\r\n        patch.diffs.push([DIFF_EQUAL, line]);\r\n      } else if (sign == '@') {\r\n        // Start of next patch.\r\n        break;\r\n      } else if (sign === '') {\r\n        // Blank line?  Whatever.\r\n      } else {\r\n        // WTF?\r\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\r\n      }\r\n      textPointer++;\r\n    }\r\n  }\r\n  return patches;\r\n};\r\n\r\n\r\n/**\r\n * Class representing one patch operation.\r\n * @constructor\r\n */\r\ndiff_match_patch.patch_obj = function() {\r\n  /** @type {!Array.<!diff_match_patch.Diff>} */\r\n  this.diffs = [];\r\n  /** @type {?number} */\r\n  this.start1 = null;\r\n  /** @type {?number} */\r\n  this.start2 = null;\r\n  /** @type {number} */\r\n  this.length1 = 0;\r\n  /** @type {number} */\r\n  this.length2 = 0;\r\n};\r\n\r\n\r\n/**\r\n * Emmulate GNU diff's format.\r\n * Header: @@ -382,8 +481,9 @@\r\n * Indicies are printed as 1-based, not 0-based.\r\n * @return {string} The GNU diff string.\r\n */\r\ndiff_match_patch.patch_obj.prototype.toString = function() {\r\n  var coords1, coords2;\r\n  if (this.length1 === 0) {\r\n    coords1 = this.start1 + ',0';\r\n  } else if (this.length1 == 1) {\r\n    coords1 = this.start1 + 1;\r\n  } else {\r\n    coords1 = (this.start1 + 1) + ',' + this.length1;\r\n  }\r\n  if (this.length2 === 0) {\r\n    coords2 = this.start2 + ',0';\r\n  } else if (this.length2 == 1) {\r\n    coords2 = this.start2 + 1;\r\n  } else {\r\n    coords2 = (this.start2 + 1) + ',' + this.length2;\r\n  }\r\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\r\n  var op;\r\n  // Escape the body of the patch with %xx notation.\r\n  for (var x = 0; x < this.diffs.length; x++) {\r\n    switch (this.diffs[x][0]) {\r\n      case DIFF_INSERT:\r\n        op = '+';\r\n        break;\r\n      case DIFF_DELETE:\r\n        op = '-';\r\n        break;\r\n      case DIFF_EQUAL:\r\n        op = ' ';\r\n        break;\r\n    }\r\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\r\n  }\r\n  return text.join('').replace(/%20/g, ' ');\r\n};\r\n\r\n\r\n// The following export code was added by @ForbesLindesay\r\nmodule.exports = diff_match_patch;\r\nmodule.exports['diff_match_patch'] = diff_match_patch;\r\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\r\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\r\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;\r\n"]}